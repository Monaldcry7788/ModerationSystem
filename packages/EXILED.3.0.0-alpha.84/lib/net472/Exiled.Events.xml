<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Exiled.Events</name>
    </assembly>
    <members>
        <member name="T:Exiled.Events.Commands.Reload.All">
            <summary>
            The reload configs command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.All.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.All"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.All.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.All.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.All.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.All.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Configs">
            <summary>
            The reload configs command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.Configs"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Configs.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.GamePlay">
            <summary>
            The reload gameplay command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.GamePlay"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.GamePlay.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Plugins">
            <summary>
            The reload plugins command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.Plugins"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Plugins.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Reload">
            <summary>
            The reload command.
            </summary>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Reload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Commands.Reload.Reload"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Reload.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Reload.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Reload.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Reload.LoadGeneratedCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Reload.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.RemoteAdmin">
            <summary>
            The reload remoteadmin command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.RemoteAdmin"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.RemoteAdmin.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Translations">
            <summary>
            The reload configs command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Translations.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.Translations"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Translations.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Translations.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Translations.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Translations.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Show.Plugins">
            <summary>
            The command to show all plugins.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Show.Plugins.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Show.Plugins.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Show.Plugins.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Show.Plugins.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Show.Show">
            <summary>
            The command to show all plugins.
            </summary>
        </member>
        <member name="M:Exiled.Events.Commands.Show.Show.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Commands.Show.Show"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Show.Show.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Show.Show.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Show.Show.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Show.Show.LoadGeneratedCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Show.Show.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Config">
            <inheritdoc cref="T:Exiled.API.Interfaces.IConfig"/>
        </member>
        <member name="P:Exiled.Events.Config.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Config.CanTutorialBlockScp173">
            <summary>
            Gets or sets a value indicating whether SCP-173 can be blocked or not by the tutorial.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.CanTutorialTriggerScp096">
            <summary>
            Gets or sets a value indicating whether SCP-096 can be triggered or not by the tutorial.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.IsNameTrackingEnabled">
            <summary>
            Gets or sets a value indicating whether the name tracking is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldDropInventory">
            <summary>
            Gets or sets a value indicating whether the inventory should be dropped before being set as spectator, through commands or plugins.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.CanSpawnBlood">
            <summary>
            Gets or sets a value indicating whether the blood can be spawned or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldReloadConfigsAtRoundRestart">
            <summary>
            Gets or sets a value indicating whether configs has to be reloaded every time a round restarts.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldReloadTranslationsAtRoundRestart">
            <summary>
            Gets or sets a value indicating whether translations has to be reloaded every time a round restarts.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldLogBans">
            <summary>
            Gets a value indicating whether bans should be logged or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.Scp096MaxShieldAmount">
            <summary>
            Gets or sets a value indicating the max shield amount for Scp096.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.LogRaCommands">
            <summary>
            Gets or sets a value indicating whether to log RA commands.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ActivatingEventArgs">
            <summary>
            Contains all informations before a player activates SCP-914.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ActivatingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ActivatingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingEventArgs.Player">
            <summary>
            Gets the player who's activating SCP-914.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-914 can be activated.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ActivatingGeneratorEventArgs">
            <summary>
            Contains all information before a player inserts a tablet into a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ActivatingGeneratorEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ActivatingGeneratorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingGeneratorEventArgs.Player"/></param>
            <param name="generator"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingGeneratorEventArgs.Generator"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingGeneratorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingGeneratorEventArgs.Player">
            <summary>
            Gets the player who's inserting a tablet into the generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingGeneratorEventArgs.Generator">
            <summary>
            Gets the <see cref="T:MapGeneration.Distributors.Scp079Generator"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingGeneratorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the tablet can be inserted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs">
            <summary>
            Contains all informations before a player activates the warhead panel.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.Player">
            <summary>
            Gets the player who's trying to activate the warhead panel.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the warhead can be activated.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ActivatingWorkstationEventArgs">
            <summary>
            Contains all informations before a player activates a workstation.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ActivatingWorkstationEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Firearms.Attachments.WorkstationController,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ActivatingWorkstationEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingWorkstationEventArgs.Player"/></param>
            <param name="controller"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingWorkstationEventArgs.WorkstationController"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingWorkstationEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingWorkstationEventArgs.Player">
            <summary>
            Gets the player who's trying to activate the workstation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingWorkstationEventArgs.WorkstationController">
            <summary>
            Gets the workstation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingWorkstationEventArgs.NewStatus">
            <summary>
            Gets or sets the workstation status.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingWorkstationEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the workstation can be activated.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.AddingTargetEventArgs">
            <summary>
            Contains all informations before adding a target to SCP-096.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.AddingTargetEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.AddingTargetEventArgs"/> class.
            </summary>
            <param name="scp096"><inheritdoc cref="P:Exiled.Events.EventArgs.AddingTargetEventArgs.Scp096"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.AddingTargetEventArgs.Target"/></param>
            <param name="enrageTimeToAdd"><inheritdoc cref="P:Exiled.Events.EventArgs.AddingTargetEventArgs.EnrageTimeToAdd"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.AddingTargetEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.AddingTargetEventArgs.Scp096">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> that is controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AddingTargetEventArgs.Target">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> being added as a target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AddingTargetEventArgs.EnrageTimeToAdd">
            <summary>
            Gets or sets how much time is added to SCP-096's enrage timer if <see cref="P:Exiled.Events.EventArgs.AddingTargetEventArgs.IsAllowed"/> is true.
            </summary>
            <remarks>This does not affect anything if he doesn't already have any targets before this event is called.</remarks>
        </member>
        <member name="P:Exiled.Events.EventArgs.AddingTargetEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the target is allowed to be added.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs">
            <summary>
            Contains all informations before C.A.S.S.I.E announces light containment zone decontamination.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs"/> class.
            </summary>
            <param name="announcementId"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.Id"/></param>
            <param name="isGlobal"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.IsGlobal"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.Id">
            <summary>
            Gets the announcement id, from 0 to 6.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.IsGlobal">
            <summary>
            Gets a value indicating whether the announcement is going to be global or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs">
            <summary>
            Contains all informations before C.A.S.S.I.E announces the NTF entrance.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.#ctor(System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs"/> class.
            </summary>
            <param name="scpsLeft"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.ScpsLeft"/></param>
            <param name="unitName"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.UnitName"/></param>
            <param name="unitNumber"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.UnitNumber"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.ScpsLeft">
            <summary>
            Gets the number of SCPs left.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.UnitName">
            <summary>
            Gets or sets the NTF unit name.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.UnitNumber">
            <summary>
            Gets or sets the NTF unit number.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the NTF spawn will be announced by C.A.S.S.I.E.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs">
            <summary>
            Contains all informations before C.A.S.S.I.E announces an SCP termination.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.#ctor(Exiled.API.Features.Player,Role,PlayerStats.HitInfo,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs"/> class.
            </summary>
            <param name="killer"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.Killer"/></param>
            <param name="role"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.Role"/></param>
            <param name="hitInfo"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.HitInfo"/></param>
            <param name="terminationCause"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.TerminationCause"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.Killer">
            <summary>
            Gets the player who killed the SCP.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.Role">
            <summary>
            Gets the killed <see cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.Role"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.HitInfo">
            <summary>
            Gets or sets the hit info.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.TerminationCause">
            <summary>
            Gets or sets the termination cause.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the SCP termination will be announced by C.A.S.S.I.E.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.BannedEventArgs">
            <summary>
            Contains all informations after banning a player from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.BannedEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,BanDetails,BanHandler.BanType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.BannedEventArgs"/> class.
            </summary>
            <param name="target">The banned player.</param>
            <param name="issuer">The issuer player.</param>
            <param name="details">The ban details.</param>
            <param name="type"><inheritdoc cref="P:Exiled.Events.EventArgs.BannedEventArgs.Type"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.BannedEventArgs.Target">
            <summary>
            Gets the banned player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.BannedEventArgs.Issuer">
            <summary>
            Gets the issuer player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.BannedEventArgs.Details">
            <summary>
            Gets the ban details.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.BannedEventArgs.Type">
            <summary>
            Gets the ban type.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.BanningEventArgs">
            <summary>
            Contains all informations before banning a player from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.BanningEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Int64,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.BanningEventArgs"/> class.
            </summary>
            <param name="target">The ban target.</param>
            <param name="issuer">The ban issuer.</param>
            <param name="duration">The ban minutes duration.</param>
            <param name="reason">The ban reason.</param>
            <param name="fullMessage">The ban full message.</param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.BanningEventArgs.Duration">
            <summary>
            Gets or sets the ban duration.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.BlinkingEventArgs">
            <summary>
            Contains all informations before a players blink near SCP-173.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.BlinkingEventArgs.#ctor(Exiled.API.Features.Player,System.Collections.Generic.List{Exiled.API.Features.Player},UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.BlinkingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.BlinkingEventArgs.Player"/></param>
            <param name="targets"><inheritdoc cref="P:Exiled.Events.EventArgs.BlinkingEventArgs.Targets"/></param>
            <param name="blinkPos"><inheritdoc cref="P:Exiled.Events.EventArgs.BlinkingEventArgs.BlinkPosition"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.BlinkingEventArgs.Player">
            <summary>
            Gets the player who controlling SCP-173.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.BlinkingEventArgs.BlinkPosition">
            <summary>
            Gets or sets the location the player is blinking to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.BlinkingEventArgs.BlinkCooldown">
            <summary>
            Gets or sets how long the blink cooldown will last.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.BlinkingEventArgs.Targets">
            <summary>
            Gets a list of players who have triggered SCP-173.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.BlinkingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the player is allowed to blink.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.CalmingDownEventArgs">
            <summary>
            Contains all informations before SCP-096 calms down.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.CalmingDownEventArgs.#ctor(PlayableScps.Scp096,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.CalmingDownEventArgs"/> class.
            </summary>
            <param name="scp096">The <see cref="T:PlayableScps.Scp096"/> instance.</param>
            <param name="player">The player who's controlling SCP-096.</param>
            <param name="isAllowed">Indicates whether or not SCP-096 can calm down.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.CancellingItemUseEventArgs">
            <summary>
            Contains all information before a player cancels usage of a medical item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.CancellingItemUseEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.CancellingItemUseEventArgs"/> class.
            </summary>
            <param name="player">The player who's stopping the use of the medical item.</param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.UsedItemEventArgs.Item"/></param>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs">
            <summary>
            Contains all informations before changing item attachments.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs.#ctor(InventorySystem.Items.Firearms.Firearm,Exiled.API.Enums.SightType,Exiled.API.Enums.BarrelType,Exiled.API.Enums.OtherType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.OldItem"/></param>
            <param name="newSight"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs.NewSight"/></param>
            <param name="newBarrel"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs.NewBarrel"/></param>
            <param name="newOther"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs.NewOther"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs.OldItem">
            <inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.OldItem"/>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs.NewSight">
            <summary>
            Gets the new item sight attachment.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs.NewBarrel">
            <summary>
            Gets the new item barrel attachment.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs.NewOther">
            <summary>
            Gets the new item other attachment.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingAttributesEventArgs">
            <summary>
            Contains all informations before changing item attributes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingAttributesEventArgs.#ctor(InventorySystem.Items.ItemBase,InventorySystem.Items.ItemBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingAttributesEventArgs"/> class.
            </summary>
            <param name="oldItem"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.OldItem"/></param>
            <param name="newItem"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.NewItem"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.OldItem">
            <summary>
            Gets the old item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.NewItem">
            <summary>
            Gets or sets the item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.NewUniqueId">
            <summary>
            Gets the new item unique id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingCameraEventArgs">
            <summary>
            Contains all informations before a SCP-079 changes the current camera.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingCameraEventArgs.#ctor(Exiled.API.Features.Player,Camera079,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingCameraEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingCameraEventArgs.Player"/></param>
            <param name="camera"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingCameraEventArgs.Camera"/></param>
            <param name="auxiliaryPowerCost"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingCameraEventArgs.AuxiliaryPowerCost"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingCameraEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingCameraEventArgs.Player">
            <summary>
            Gets the player who is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingCameraEventArgs.Camera">
            <summary>
            Gets or sets the camera SCP-079 will be moved to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingCameraEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power that will be required to switch cameras.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingCameraEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can switch cameras.
            Defaults to a value describing whether or not SCP-079 has enough auxiliary power to switch.
            Can be set to true to allow a switch regardless of SCP-079's auxiliary power amount.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingDurabilityEventArgs">
            <summary>
            Contains all informations before changing item durability.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingDurabilityEventArgs.#ctor(InventorySystem.Items.Firearms.Firearm,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingDurabilityEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.OldItem"/></param>
            <param name="newDurability"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingDurabilityEventArgs.NewDurability"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingAttributesEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingDurabilityEventArgs.Item">
            <inheritdoc cref="P:Exiled.Events.EventArgs.ChangingDurabilityEventArgs.Item"/>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingDurabilityEventArgs.NewDurability">
            <summary>
            Gets or sets the new durability to be used by the weapon.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingGroupEventArgs">
            <summary>
            Contains all informations before a player changes his group.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingGroupEventArgs.#ctor(Exiled.API.Features.Player,UserGroup,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingGroupEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.Player"/></param>
            <param name="newGroup"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.NewGroup"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.Player">
            <summary>
            Gets the player who's changing his group.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.NewGroup">
            <summary>
            Gets or sets the player's new group.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can change groups.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs">
            <summary>
            Contains all informations before a player's intercom mute status is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs.Player"/></param>
            <param name="isMuted"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs.IsMuted"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs.Player">
            <summary>
            Gets the player who's being intercom muted/unmuted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be intercom muted/unmuted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs.IsMuted">
            <summary>
            Gets a value indicating whether the player is being intercom muted or unmuted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingIntoGrenadeEventArgs">
            <summary>
            Contains all information for when the server is turning a pickup into a live grenade.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingIntoGrenadeEventArgs.#ctor(InventorySystem.Items.Pickups.ItemPickupBase,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingIntoGrenadeEventArgs"/> class.
            </summary>
            <param name="pickup">The <see cref="P:Exiled.Events.EventArgs.ChangingIntoGrenadeEventArgs.Pickup"/> being changed.</param>
            <param name="fuseTime">The duration, in seconds, of the fuse time to be used when the grenade goes live.</param>
            <param name="isAllowed">Whether or not the event is allowed to continue.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingIntoGrenadeEventArgs.Pickup">
            <summary>
            Gets a value indicating the pickup being changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingIntoGrenadeEventArgs.Type">
            <summary>
            Gets or sets a value indicating what type of grenade will be spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingIntoGrenadeEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the pickup will be changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingIntoGrenadeEventArgs.FuseTime">
            <summary>
            Gets or sets a value indicating how long the fuse of the changed grenade will be.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingItemEventArgs">
            <summary>
            Contains all information before a player's held item changes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingItemEventArgs.Player"/></param>
            <param name="newItem"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingItemEventArgs.NewItem"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingItemEventArgs.Player">
            <summary>
            Gets the player who's changing the item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingItemEventArgs.NewItem">
            <summary>
            Gets or sets the new item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event is allowed to continue.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs">
            <summary>
            Contains all information before a player changes the SCP-914 knob setting.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.#ctor(Exiled.API.Features.Player,Scp914.Scp914KnobSetting,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.Player"/></param>
            <param name="knobSetting"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.KnobSetting"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.Player">
            <summary>
            Gets the player who's changing the SCP-914 knob setting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.KnobSetting">
            <summary>
            Gets or sets the SCP-914 knob setting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-914's knob setting can be changed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingLeverStatusEventArgs">
            <summary>
            Contains all informations before a player changes the warhead lever status.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingLeverStatusEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingLeverStatusEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingLeverStatusEventArgs.Player"/></param>
            <param name="curState"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingLeverStatusEventArgs.CurrentState"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingLeverStatusEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingLeverStatusEventArgs.Player">
            <summary>
            Gets the player who's changing the warhead status.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingLeverStatusEventArgs.CurrentState">
            <summary>
            Gets a value indicating whether the lever is enabled.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingLeverStatusEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the lever status will change.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs">
            <summary>
            Contains all information before MicroHID state is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.MicroHID.MicroHIDItem,InventorySystem.Items.MicroHID.HidState,InventorySystem.Items.MicroHID.HidState,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.Player"/></param>
            <param name="microHID"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.MicroHID"/></param>
            <param name="oldState"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.OldState"/></param>
            <param name="newState"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.NewState"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.Player">
            <summary>
            Gets the player who's using the MicroHID.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.MicroHID">
            <summary>
            Gets the MicroHID instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.OldState">
            <summary>
            Gets the old MicroHID state.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.NewState">
            <summary>
            Gets or sets the new MicroHID state.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the MicroHID state can be changed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingMuteStatusEventArgs">
            <summary>
            Contains all informations before a player's mute status is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingMuteStatusEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingMuteStatusEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingMuteStatusEventArgs.Player"/></param>
            <param name="isMuted"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingMuteStatusEventArgs.IsMuted"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingMuteStatusEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingMuteStatusEventArgs.Player">
            <summary>
            Gets the player who's being muted/unmuted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingMuteStatusEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be muted/unmuted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingMuteStatusEventArgs.IsMuted">
            <summary>
            Gets a value indicating whether the player is being muted or unmuted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs">
            <summary>
            Contains all informations before radio preset is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs.#ctor(Exiled.API.Features.Player,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs.Player"/></param>
            <param name="oldValue"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs.OldValue"/></param>
            <param name="newValue"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs.NewValue"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs.Player">
            <summary>
            Gets the player who's using the radio.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs.OldValue">
            <summary>
            Gets the old radio preset value.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs.NewValue">
            <summary>
            Gets or sets the new radio preset value.
            <remarks>Client radio graphics won't sync with this value.</remarks>
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the radio preset can be changed or not.
            <remarks>Client radio graphics won't sync with <see cref="P:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs.OldValue"/>.</remarks>
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingRoleEventArgs">
            <summary>
            Contains all information before a player's <see cref="T:RoleType"/> changes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingRoleEventArgs.#ctor(Exiled.API.Features.Player,RoleType,System.Boolean,CharacterClassManager.SpawnReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingRoleEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Player"/></param>
            <param name="newRole"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.NewRole"/></param>
            <param name="shouldPreservePosition"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Lite"/></param>
            <param name="reason"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Reason"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Player">
            <summary>
            Gets the player whose <see cref="T:RoleType"/> is changing.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.NewRole">
            <summary>
            Gets or sets the new player's role.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Items">
            <summary>
            Gets base items that the player will receive. (Changing this will overwrite their current inventory if Lite is true!).
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Ammo">
            <summary>
            Gets the base ammo values for the new role. (Changing this will overwrite their current inventory if Lite is true!).
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Reason">
            <summary>
            Gets or sets the reason for their class change.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Lite">
            <summary>
            Gets or sets a value indicating whether the position and items has to be preserved after changing the role.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can continue.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChargingEventArgs">
            <summary>
            Contains all informations before SCP-096 charges.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChargingEventArgs.#ctor(PlayableScps.Scp096,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChargingEventArgs"/> class.
            </summary>
            <param name="scp096"><inheritdoc cref="P:Exiled.Events.EventArgs.ChargingEventArgs.Scp096"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChargingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChargingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChargingEventArgs.Scp096">
            <summary>
            Gets the SCP-096 instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChargingEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChargingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-096 can charge.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChargingPlayerEventArgs">
            <summary>
            Contains all informations before SCP-096 charges a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChargingPlayerEventArgs.#ctor(PlayableScps.Scp096,Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChargingPlayerEventArgs"/> class.
            </summary>
            <param name="scp096"><inheritdoc cref="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.Scp096"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.Player"/></param>
            <param name="victim"><inheritdoc cref="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.Victim"/></param>
            <param name="isTarget"><inheritdoc cref="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.IsTarget"/></param>
            <param name="damage"><inheritdoc cref="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.Damage"/></param>
            <param name="endCharge"><inheritdoc cref="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.EndCharge"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.Scp096">
            <summary>
            Gets the SCP-096 instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.Victim">
            <summary>
            Gets the player who SCP-096 is charging.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.IsTarget">
            <summary>
            Gets a value indicating whether the target is one of SCP-096's targets.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.Damage">
            <summary>
            Gets or sets the inflicted damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.EndCharge">
            <summary>
            Gets or sets a value indicating whether SCP-096's charge should be ended next frame.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChargingPlayerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-096 can hit the target.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ClosingGeneratorEventArgs">
            <summary>
            Contains all informations before a player closes a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ClosingGeneratorEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ClosingGeneratorEventArgs"/> class.
            </summary>
            <param name="player">The player who's closing the generator.</param>
            <param name="generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator"/> instance.</param>
            <param name="isAllowed">Indicates whether or not the generator can be closed.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.ContainingEventArgs">
            <summary>
            Contains all informations before containing SCP-106.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ContainingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ContainingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ContainingEventArgs.Player"/></param>
            <param name="buttonPresser"><inheritdoc cref="P:Exiled.Events.EventArgs.ContainingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ContainingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ContainingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-106.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ContainingEventArgs.ButtonPresser">
            <summary>
            Gets the player who pressed the button.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ContainingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-106 can be recontained.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.CreatingPortalEventArgs">
            <summary>
            Contains all informations before SCP-106 creates a portal.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.CreatingPortalEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.CreatingPortalEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.Player"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.Position"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-106.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.Position">
            <summary>
            Gets or sets the portal position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-106 can create a portal.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs">
            <summary>
            Contains all information before a player damages a shooting target.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Firearms.Utilities.ShootingTarget,InventorySystem.Items.IDamageDealer,Footprinting.Footprint,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.Player"/></param>
            <param name="shootingTarget"><inheritdoc cref="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.ShootingTarget"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.Item"/></param>
            <param name="attackerFootprint"><inheritdoc cref="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.AttackerFootprint"/></param>
            <param name="hitLocation"><inheritdoc cref="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.HitLocation"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.Player">
            <summary>
            Gets the player damaging the shooting target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.ShootingTarget">
            <summary>
            Gets the shooting target being damaged.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.Item">
            <summary>
            Gets the item dealing the damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.AttackerFootprint">
            <summary>
            Gets the attacker's footprint.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.HitLocation">
            <summary>
            Gets the exact world location the bullet impacted the target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the damage is allowed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DamagingWindowEventArgs">
            <summary>
            Contains all informations before damage is dealt to a <see cref="T:BreakableWindow"/>.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DamagingWindowEventArgs.#ctor(BreakableWindow,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DamagingWindowEventArgs"/> class.
            </summary>
            <param name="window"><inheritdoc cref="P:Exiled.Events.EventArgs.DamagingWindowEventArgs.Window"/></param>
            <param name="damage"><inheritdoc cref="P:Exiled.Events.EventArgs.DamagingWindowEventArgs.Damage"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DamagingWindowEventArgs.Window">
            <summary>
            Gets the <see cref="T:BreakableWindow"/> object that is damaged.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DamagingWindowEventArgs.Damage">
            <summary>
            Gets or sets the damage the window will receive.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DeactivatingWorkstationEventArgs">
            <summary>
            Contains all informations before deactivating a workstation.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DeactivatingWorkstationEventArgs.#ctor(InventorySystem.Items.Firearms.Attachments.WorkstationController,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DeactivatingWorkstationEventArgs"/> class.
            </summary>
            <param name="controller"><inheritdoc cref="P:Exiled.Events.EventArgs.DeactivatingWorkstationEventArgs.WorkstationController"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.DeactivatingWorkstationEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DeactivatingWorkstationEventArgs.WorkstationController">
            <summary>
            Gets the workstation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DeactivatingWorkstationEventArgs.NewStatus">
            <summary>
            Gets or sets the workstation status.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DeactivatingWorkstationEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the workstation can be deactivated.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DecontaminatingEventArgs">
            <summary>
            Contains all informations before decontaminating the light containment zone.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DecontaminatingEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DecontaminatingEventArgs"/> class.
            </summary>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.DecontaminatingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DecontaminatingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not light containment zone decontamination can begin.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DequippedMedicalItemEventArgs">
            <summary>
            Contains all informations after a player dequipes a medical item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DequippedMedicalItemEventArgs.#ctor(Exiled.API.Features.Player,ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DequippedMedicalItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.DequippedMedicalItemEventArgs.Player"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.DequippedMedicalItemEventArgs.Item"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DequippedMedicalItemEventArgs.Player">
            <summary>
            Gets the player who used the medical item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DequippedMedicalItemEventArgs.Item">
            <summary>
            Gets the medical item that the player consumed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DestroyingEventArgs">
            <summary>
            Contains all informations before a player's object is destroyed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DestroyingEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DestroyingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.DestroyingEventArgs.Player"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DestroyingEventArgs.Player">
            <summary>
            Gets the destoying player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DiedEventArgs">
            <summary>
            Contains all informations after a player dies.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DiedEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,PlayerStats.HitInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DiedEventArgs"/> class.
            </summary>
            <param name="killer"><inheritdoc cref="P:Exiled.Events.EventArgs.DiedEventArgs.Killer"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.DiedEventArgs.Target"/></param>
            <param name="hitInformations"><inheritdoc cref="P:Exiled.Events.EventArgs.DiedEventArgs.HitInformations"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DiedEventArgs.Killer">
            <summary>
            Gets the killer player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DiedEventArgs.Target">
            <summary>
            Gets the killed player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DiedEventArgs.HitInformations">
            <summary>
            Gets or sets the hit informations.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DroppingItemEventArgs">
            <summary>
            Contains all information before a player drops an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DroppingItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ItemBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DroppingItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.DroppingItemEventArgs.Player"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.DroppingItemEventArgs.Item"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.DroppingItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DroppingItemEventArgs.Player">
            <summary>
            Gets the player who's dropping the item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DroppingItemEventArgs.Item">
            <summary>
            Gets the item to be dropped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DroppingItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the item can be dropped.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DroppingNullEventArgs">
            <summary>
            Contains all information before a player drops a null item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DroppingNullEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DroppingNullEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.DroppingNullEventArgs.Player"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DroppingNullEventArgs.Player">
            <summary>
            Gets the player who's dropping the null item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DyingEventArgs">
            <summary>
            Contains all information before a player dies.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DyingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,PlayerStats.HitInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DyingEventArgs"/> class.
            </summary>
            <param name="killer"><inheritdoc cref="P:Exiled.Events.EventArgs.DyingEventArgs.Killer"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.DyingEventArgs.Target"/></param>
            <param name="hitInformation"><inheritdoc cref="P:Exiled.Events.EventArgs.DyingEventArgs.HitInformation"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.DyingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DyingEventArgs.Killer">
            <summary>
            Gets the killing player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DyingEventArgs.Target">
            <summary>
            Gets the dying player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DyingEventArgs.HitInformation">
            <summary>
            Gets or sets the hit information.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DyingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be killed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ElevatorTeleportEventArgs">
            <summary>
            Contains all informations before SCP-079 changes rooms via elevator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ElevatorTeleportEventArgs.#ctor(Exiled.API.Features.Player,Camera079,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ElevatorTeleportEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.Player"/></param>
            <param name="camera"><inheritdoc cref="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.Camera"/></param>
            <param name="auxiliaryPowerCost"><inheritdoc cref="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.AuxiliaryPowerCost"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.IsAllowed"/></param>
        </member>
        <member name="T:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs">
            <summary>
            Contains all informations before SCP-079 changes rooms via elevator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.#ctor(Exiled.API.Features.Player,Camera079,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.Player"/></param>
            <param name="camera"><inheritdoc cref="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.Camera"/></param>
            <param name="auxiliaryPowerCost"><inheritdoc cref="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.AuxiliaryPowerCost"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.Camera">
            <summary>
            Gets or sets the <see cref="T:Camera079"/> that SCP-079 will be moved to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to teleport to an elevator camera.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can teleport.
            Defaults to a <see cref="T:System.Boolean"/> describing whether or not SCP-079 has enough auxiliary power to teleport.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EndingRoundEventArgs">
            <summary>
            Contains all informations before ending a round.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EndingRoundEventArgs.#ctor(Exiled.API.Enums.LeadingTeam,RoundSummary.SumInfo_ClassList,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EndingRoundEventArgs"/> class.
            </summary>
            <param name="classList"><inheritdoc cref="T:RoundSummary.SumInfo_ClassList"/></param>
            <param name="leadingTeam"><inheritdoc cref="P:Exiled.Events.EventArgs.EndingRoundEventArgs.LeadingTeam"/></param>
            <param name="isRoundEnded"><inheritdoc cref="P:Exiled.Events.EventArgs.EndingRoundEventArgs.IsRoundEnded"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EndingRoundEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EndingRoundEventArgs.ClassList">
            <summary>
            Gets or sets the round summary class list.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EndingRoundEventArgs.LeadingTeam">
            <summary>
            Gets or sets the leading team.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EndingRoundEventArgs.IsRoundEnded">
            <summary>
            Gets or sets a value indicating whether the round is going to finish or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EndingRoundEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EnragingEventArgs">
            <summary>
            Contains all informations before SCP-096 gets enraged.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EnragingEventArgs.#ctor(PlayableScps.Scp096,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EnragingEventArgs"/> class.
            </summary>
            <param name="scp096"><inheritdoc cref="P:Exiled.Events.EventArgs.EnragingEventArgs.Scp096"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.EnragingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EnragingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnragingEventArgs.Scp096">
            <summary>
            Gets the SCP-096 instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnragingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnragingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-096 can be enraged.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs">
            <summary>
            Contains all informations before a player enters the femur breaker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs.Player">
            <summary>
            Gets the player who's entering the femur breaker.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can activate the femur breaker.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs">
            <summary>
            Contains all informations before a player enters the pocket dimension.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.Player"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.Position"/></param>
            <param name="scp106"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.Scp106"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.Player">
            <summary>
            Gets the player who's entering the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.Scp106">
            <summary>
            Gets the SCP-106 who sent the player to the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.Position">
            <summary>
            Gets or sets the pocket dimension position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can enter the pocket dimension.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EscapingEventArgs">
            <summary>
            Contains all information before a player escapes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EscapingEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EscapingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.EscapingEventArgs.Player"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingEventArgs.Player">
            <summary>
            Gets the player who's escaping.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingEventArgs.NewRole">
            <summary>
            Gets or sets the role that will be assigned when the player escapes.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can escape.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs">
            <summary>
            Contains all informations before a player escapes the pocket dimension.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.Player"/></param>
            <param name="teleportPosition"><inheritdoc cref="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.TeleportPosition"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.Player">
            <summary>
            Gets the player who's escaping the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.TeleportPosition">
            <summary>
            Gets or sets the position in which the player is going to be teleported to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can successfully escape the pocket dimension.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs">
            <summary>
            Contains all information before a grenade explodes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ThrowableProjectiles.EffectGrenade,UnityEngine.Collider[])">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs"/> class.
            </summary>
            <param name="thrower"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Thrower"/></param>
            <param name="grenade"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Grenade"/></param>
            <param name="targets"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.TargetsToAffect"/></param>
        </member>
        <member name="M:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ThrowableProjectiles.EffectGrenade,System.Collections.Generic.List{Exiled.API.Features.Player})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs"/> class.
            </summary>
            <param name="thrower"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Thrower"/></param>
            <param name="grenade"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Grenade"/></param>
            <param name="players"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.TargetsToAffect"/></param>
        </member>
        <member name="M:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Thrower">
            <summary>
            Gets the player who thrown the grenade.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.TargetsToAffect">
            <summary>
            Gets the players who could be affected by the grenade, if any, and the damage that would hurt them.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.IsFrag">
            <summary>
            Gets a value indicating whether the grenade is a frag or flash grenade.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Grenade">
            <summary>
            Gets the grenade that is exploding.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the grenade can be thrown.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs">
            <summary>
            Contains all informations before a player dies from walking through an incorrect exit in the pocket dimension.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.#ctor(Exiled.API.Features.Player,PocketDimensionTeleport,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.Player"/></param>
            <param name="teleporter"><inheritdoc cref="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.Teleporter"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.Player">
            <summary>
            Gets the player who's escaping the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.Teleporter">
            <summary>
            Gets the PocketDimensionTeleport the player walked into.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player dies by failing the pocket dimension escape.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.FinishingRecallEventArgs">
            <summary>
            Contains all informations before SCP-049 finishes recalling a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.FinishingRecallEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.FinishingRecallEventArgs"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.Target"/></param>
            <param name="scp049"><inheritdoc cref="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.Scp049"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.Target">
            <summary>
            Gets the player who's getting recalled.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.Scp049">
            <summary>
            Gets the player who is controlling SCP-049.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be recalled.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.FlippingCoinEventArgs">
            <summary>
            Contains all informations before a player flips a coin.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.FlippingCoinEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.FlippingCoinEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.FlippingCoinEventArgs.Player"/></param>
            <param name="isTails"><inheritdoc cref="P:Exiled.Events.EventArgs.FlippingCoinEventArgs.IsTails"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.FlippingCoinEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.FlippingCoinEventArgs.Player">
            <summary>
            Gets the player who's flipping the coin.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.FlippingCoinEventArgs.IsTails">
            <summary>
            Gets or sets a value indicating whether or not the coin is landing on tails.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.FlippingCoinEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the coin can be flipped.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.GainingExperienceEventArgs">
            <summary>
            Contains all informations before SCP-079 gains experience.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.GainingExperienceEventArgs.#ctor(Exiled.API.Features.Player,ExpGainType,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.GainingExperienceEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.Player"/></param>
            <param name="gainType"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.GainType"/></param>
            <param name="amount"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.Amount"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.GainType">
            <summary>
            Gets the experience gain type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.Amount">
            <summary>
            Gets or sets the amount of experience to be gained.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the experience is successfully granted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.GainingLevelEventArgs">
            <summary>
            Contains all informations before SCP-079 gains a level.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.GainingLevelEventArgs.#ctor(Exiled.API.Features.Player,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.GainingLevelEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingLevelEventArgs.Player"/></param>
            <param name="newLevel"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingLevelEventArgs.NewLevel"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingLevelEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingLevelEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingLevelEventArgs.NewLevel">
            <summary>
            Gets or sets the new level of SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingLevelEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the level is successfully granted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.GeneratorActivatedEventArgs">
            <summary>
            Contains all informations after activating a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.GeneratorActivatedEventArgs.#ctor(MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.GeneratorActivatedEventArgs"/> class.
            </summary>
            <param name="generator"><inheritdoc cref="P:Exiled.Events.EventArgs.GeneratorActivatedEventArgs.Generator"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.GeneratorActivatedEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.GeneratorActivatedEventArgs.Generator">
            <summary>
            Gets the activated generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GeneratorActivatedEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the generator can be activated or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.HandcuffingEventArgs">
            <summary>
            Contains all informations before handcuffing a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.HandcuffingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.HandcuffingEventArgs"/> class.
            </summary>
            <param name="cuffer"><inheritdoc cref="P:Exiled.Events.EventArgs.HandcuffingEventArgs.Cuffer"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.HandcuffingEventArgs.Target"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.HandcuffingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.HandcuffingEventArgs.Cuffer">
            <summary>
            Gets the cuffer player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HandcuffingEventArgs.Target">
            <summary>
            Gets the target player to be cuffed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HandcuffingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be handcuffed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.HurtingEventArgs">
            <summary>
            Contains all informations before a player gets damaged.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.HurtingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,PlayerStats.HitInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.HurtingEventArgs"/> class.
            </summary>
            <param name="attacker"><inheritdoc cref="P:Exiled.Events.EventArgs.HurtingEventArgs.Attacker"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.HurtingEventArgs.Target"/></param>
            <param name="hitInformations"><inheritdoc cref="P:Exiled.Events.EventArgs.HurtingEventArgs.HitInformation"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.HurtingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.Attacker">
            <summary>
            Gets the attacker player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.Target">
            <summary>
            Gets the target player, who is going to be hurt.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.HitInformation">
            <summary>
            Gets the hit informations.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.Time">
            <summary>
            Gets the time at which the player was hurt.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.DamageType">
            <summary>
            Gets the damage type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.Amount">
            <summary>
            Gets or sets the amount of inflicted damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player will be dealt damage.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractedEventArgs">
            <summary>
            Contains all informations after a player has interacted with an interactable.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractedEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractedEventArgs.Player"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractedEventArgs.Player">
            <summary>
            Gets the player who interacted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractingDoorEventArgs">
            <summary>
            Contains all informations before a player interacts with a door.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractingDoorEventArgs.#ctor(Exiled.API.Features.Player,Interactables.Interobjects.DoorUtils.DoorVariant,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractingDoorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Player"/></param>
            <param name="door"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Door"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Player">
            <summary>
            Gets the player who's interacting with the door.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Door">
            <summary>
            Gets or sets the <see cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Door"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can interact with the door.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractingElevatorEventArgs">
            <summary>
            Contains all information before a player interacts with an elevator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractingElevatorEventArgs.#ctor(Exiled.API.Features.Player,Lift.Elevator,Lift,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractingElevatorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Player"/></param>
            <param name="elevator"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Elevator"/></param>
            <param name="lift"><inheritdoc cref="T:System.Type"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Player">
            <summary>
            Gets the player who's interacting with the elevator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Elevator">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Elevator"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Lift">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Lift"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Status">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Lift"/> current <see cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Status"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can interact with the elevator.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractingLockerEventArgs">
            <summary>
            Contains all informations before a player interacts with a locker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractingLockerEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Locker,MapGeneration.Distributors.LockerChamber,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractingLockerEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Player"/></param>
            <param name="locker"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Locker"/></param>
            <param name="lockerChamber"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Chamber"/></param>
            <param name="chamberId"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.ChamberId"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Player">
            <summary>
            Gets the player who's interacting with the locker.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Locker">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Locker"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Chamber">
            <summary>
            Gets the interacting chamber.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.ChamberId">
            <summary>
            Gets the chamber id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can interact with the locker.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs">
            <summary>
            Contains all information before a player interacts with a shooting target.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Firearms.Utilities.ShootingTarget,Exiled.API.Enums.ShootingTargetButton,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.Player"/></param>
            <param name="shootingTarget"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.ShootingTarget"/></param>
            <param name="targetButton"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.TargetButton"/></param>
            <param name="maxHp"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.NewMaxHp"/></param>
            <param name="autoResetTime"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.NewAutoResetTime"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.Player">
            <summary>
            Gets the player interacting with the shooting target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.ShootingTarget">
            <summary>
            Gets the shooting target being interacted with.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.TargetButton">
            <summary>
            Gets the button the player interacted with.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.NewMaxHp">
            <summary>
            Gets or sets the new max hp of the target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.NewAutoResetTime">
            <summary>
            Gets or sets the new auto reset time of the target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the interaction is allowed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractingTeslaEventArgs">
            <summary>
            Contains all informations before SCP-079 triggers a tesla gate.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractingTeslaEventArgs.#ctor(Exiled.API.Features.Player,TeslaGate,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractingTeslaEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.Player"/></param>
            <param name="tesla"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.Tesla"/></param>
            <param name="auxiliaryPowerCost"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.AuxiliaryPowerCost"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.Tesla">
            <summary>
            Gets the <see cref="T:TeslaGate"/> that SCP-079 is triggering.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to interact with a tesla gate through SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can interact with the tesla gate.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.IntercomSpeakingEventArgs">
            <summary>
            Contains all informations before a player speaks to the intercom.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.IntercomSpeakingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.IntercomSpeakingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.IntercomSpeakingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.IntercomSpeakingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.IntercomSpeakingEventArgs.Player">
            <summary>
            Gets the player who's going to speak to the intercom.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.IntercomSpeakingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can speak to the intercom.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.JoinedEventArgs">
            <summary>
            Contains all informations after a player joins the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.JoinedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.JoinedEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.JoinedEventArgs.Player"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.JoinedEventArgs.Player">
            <summary>
            Gets the joined player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.KickedEventArgs">
            <summary>
            Contains all informations after kicking a player from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.KickedEventArgs.#ctor(Exiled.API.Features.Player,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.KickedEventArgs"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.KickedEventArgs.Target"/></param>
            <param name="reason"><inheritdoc cref="P:Exiled.Events.EventArgs.KickedEventArgs.Reason"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickedEventArgs.Target">
            <summary>
            Gets the kicked player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickedEventArgs.Reason">
            <summary>
            Gets the kick reason.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.KickingEventArgs">
            <summary>
            Contains all informations before kicking a player from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.KickingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.KickingEventArgs"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.KickingEventArgs.Target"/></param>
            <param name="issuer"><inheritdoc cref="P:Exiled.Events.EventArgs.KickingEventArgs.Issuer"/></param>
            <param name="reason"><inheritdoc cref="P:Exiled.Events.EventArgs.KickingEventArgs.Reason"/></param>
            <param name="fullMessage"><inheritdoc cref="P:Exiled.Events.EventArgs.KickingEventArgs.FullMessage"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.KickingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickingEventArgs.Target">
            <summary>
            Gets or sets the ban target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickingEventArgs.Issuer">
            <summary>
            Gets or sets the ban issuer.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickingEventArgs.Reason">
            <summary>
            Gets or sets the kick reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickingEventArgs.FullMessage">
            <summary>
            Gets or sets the full kick message.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not action is taken against the target.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.KickingEventArgs.LogBanChange(System.String)">
            <summary>
            Logs the kick, anti-backdoor protection from malicious plugins.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.LeftEventArgs">
            <summary>
            Contains all player's information, after he leaves the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.LeftEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.LeftEventArgs"/> class.
            </summary>
            <param name="player">The player who left the server.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.LocalReportingEventArgs">
            <summary>
            Contains informations before a report is sent to local administrators.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.LocalReportingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.LocalReportingEventArgs"/> class.
            </summary>
            <param name="issuer"><inheritdoc cref="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Issuer"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Target"/></param>
            <param name="reason"><inheritdoc cref="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Reason"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.LocalReportingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Issuer">
            <summary>
            Gets the report issuer.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Target">
            <summary>
            Gets the report target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Reason">
            <summary>
            Gets or sets the report reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.LocalReportingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the report can be processed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.LockingDownEventArgs">
            <summary>
            Contains all information before SCP-079 lockdowns a room.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.LockingDownEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.RoomIdentifier,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.LockingDownEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.LockingDownEventArgs.Player"/></param>
            <param name="roomIdentifier"><inheritdoc cref="P:Exiled.Events.EventArgs.LockingDownEventArgs.RoomGameObject"/></param>
            <param name="auxiliaryPowerCost"><inheritdoc cref="P:Exiled.Events.EventArgs.LockingDownEventArgs.AuxiliaryPowerCost"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.LockingDownEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.LockingDownEventArgs.RoomGameObject">
            <summary>
            Gets the <see cref="T:MapGeneration.RoomIdentifier"/> of the room that will be locked down.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.LockingDownEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to lockdown a room.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.LockingDownEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can lockdown a room.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.OpeningGeneratorEventArgs">
            <summary>
            Contains all informations before a player opens a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.OpeningGeneratorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.Player"/></param>
            <param name="generator"><inheritdoc cref="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.Generator"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.Player">
            <summary>
            Gets the player who's opening the generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.Generator">
            <summary>
            Gets the generator that is opening.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the generator can be opened.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PickingUpAmmoEventArgs">
            <summary>
            Contains all information before a player picks up an ammo.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PickingUpAmmoEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Pickups.ItemPickupBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PickingUpAmmoEventArgs"/> class.
            </summary>
            <param name="player">The player who's picking up the ammo.</param>
            <param name="pickup">The pickup to be picked up.</param>
            <param name="isAllowed">Gets or sets a value indicating whether or not the ammo can be picked up.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PickingUpAmmoEventArgs.AmmoType">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.AmmoType"/> of the item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PickingUpArmorEventArgs">
            <summary>
            Contains all information before a player picks up <see cref="T:Exiled.API.Features.Items.Armor"/>.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PickingUpArmorEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Pickups.ItemPickupBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PickingUpArmorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.Player"/></param>
            <param name="pickup"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.Pickup"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="T:Exiled.Events.EventArgs.PickingUpItemEventArgs">
            <summary>
            Contains all information before a player picks up an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PickingUpItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Pickups.ItemPickupBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PickingUpItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.Player"/></param>
            <param name="pickup"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.Pickup"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.Player">
            <summary>
            Gets the player who dropped the item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.Pickup">
            <summary>
            Gets the dropped pickup.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the item can be picked up.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PickingUpScp330EventArgs">
            <summary>
            Contains all informations before a player interacts with SCP-330.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PickingUpScp330EventArgs.#ctor(Exiled.API.Features.Player,System.Int32,ItemType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PickingUpScp330EventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpScp330EventArgs.Player"/></param>
            <param name="usage"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpScp330EventArgs.Usage"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpScp330EventArgs.ItemId"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpScp330EventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PickingUpScp330EventArgs.Player">
            <summary>
            Gets the player who's interacting with SCP-330.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PickingUpScp330EventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can interact with SCP-330.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PickingUpScp330EventArgs.Usage">
            <summary>
            Gets or sets player's pickup counter.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PickingUpScp330EventArgs.IsSevere">
            <summary>
            Gets or sets a value indicating whether or not the interaction should be severe.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PickingUpScp330EventArgs.ItemId">
            <summary>
            Gets or sets a value indicating what item will be picked up.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PlacingBloodEventArgs">
            <summary>
            Contains all informations before a player places blood.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PlacingBloodEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PlacingBloodEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Player"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Position"/></param>
            <param name="type"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Type"/></param>
            <param name="multiplier"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Multiplier"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Player">
            <summary>
            Gets the player who's placing the blood.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Position">
            <summary>
            Gets or sets the blood placing position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Type">
            <summary>
            Gets or sets the blood type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Multiplier">
            <summary>
            Gets or sets the blood multiplier.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the blood can be placed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PlacingBulletHole">
            <summary>
            Contains all informations before placing a decal.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PlacingBulletHole.#ctor(Exiled.API.Features.Player,UnityEngine.RaycastHit)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PlacingBulletHole"/> class.
            </summary>
            <param name="owner"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBulletHole.Owner"/></param>
            <param name="hit"><inheritdoc cref="T:UnityEngine.RaycastHit"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBulletHole.Owner">
            <summary>
            Gets the decal owner.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBulletHole.Position">
            <summary>
            Gets or sets the decal position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBulletHole.Rotation">
            <summary>
            Gets or sets the decal rotation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBulletHole.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the decal can be placed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PlacingTantrumEventArgs">
            <summary>
            Contains all information before the tantrum is placed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PlacingTantrumEventArgs.#ctor(PlayableScps.Scp173,Exiled.API.Features.Player,UnityEngine.GameObject,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PlacingTantrumEventArgs"/> class.
            </summary>
            <param name="scp173"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.Scp173"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.Player"/></param>
            <param name="gameObject"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.GameObject"/></param>
            <param name="cooldown"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.Cooldown"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.Scp173">
            <summary>
            Gets the player's <see cref="T:PlayableScps.Scp173"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.Player">
            <summary>
            Gets the player who's placing the tantrum.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.GameObject">
            <summary>
            Gets the tantrum <see cref="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.Cooldown">
            <summary>
            Gets or sets the tantrum cooldown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingTantrumEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the tantrum can be placed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PreAuthenticatingEventArgs">
            <summary>
            Contains all informations before pre-autenticating a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.#ctor(System.String,LiteNetLib.ConnectionRequest,System.Int32,System.Byte,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PreAuthenticatingEventArgs"/> class.
            </summary>
            <param name="userId"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.UserId"/></param>
            <param name="request"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Request"/></param>
            <param name="readerStartPosition"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.ReaderStartPosition"/></param>
            <param name="flags"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Flags"/></param>
            <param name="country"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Country"/></param>
            <param name="num"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.UserId">
            <summary>
            Gets the player's user id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.ReaderStartPosition">
            <summary>
            Gets the reader starting position for reading the preauth.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Flags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Country">
            <summary>
            Gets the player's country.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Request">
            <summary>
            Gets the connection request.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the player can be authenticated or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.ServerFull">
            <summary>
            Gets a value indicating whether the server is full.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Delay(System.Byte,System.Boolean)">
            <summary>
            Delays the connection.
            </summary>
            <param name="seconds">The delay in seconds.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Redirect(System.UInt16,System.Boolean)">
            <summary>
            Rejects the player and redirects them to another server port.
            </summary>
            <param name="port">The new server port.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.RejectBanned(System.String,System.DateTime,System.Boolean)">
            <summary>
            Rejects a player who's trying to authenticate.
            </summary>
            <param name="banReason">The ban reason.</param>
            <param name="expiration">The ban expiration time.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.RejectBanned(System.String,System.Int64,System.Boolean)">
            <summary>
            Rejects a player who's trying to authenticate.
            </summary>
            <param name="banReason">The ban reason.</param>
            <param name="expiration">The ban expiration time in .NET Ticks.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Reject(LiteNetLib.Utils.NetDataWriter,System.Boolean)">
            <summary>
            Rejects a player who's trying to authenticate.
            </summary>
            <param name="writer">The <see cref="T:LiteNetLib.Utils.NetDataWriter"/> instance.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Reject(System.String,System.Boolean)">
            <summary>
            Rejects a player who's trying to authenticate.
            </summary>
            <param name="rejectionReason">The custom rejection reason.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Reject(RejectionReason,System.Boolean,System.String,System.Int64,System.Byte,System.UInt16)">
            <summary>
            Rejects a player who's trying to authenticate.
            </summary>
            <param name="rejectionReason">The rejection reason.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
            <param name="customReason">The custom rejection reason (Banned and Custom reasons only).</param>
            <param name="expiration">The ban expiration ticks (Banned reason only).</param>
            <param name="seconds">The delay in seconds (Delay reason only).</param>
            <param name="port">The redirection port (Redirect reason only).</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Disallow">
            <summary>
            Disallows the connection without sending any reason. Should only be used when the connection has already been terminated by the plugin itself.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ProcessingHotkeyEventArgs">
            <summary>
            Contains all informations before pressing a hotkey.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ProcessingHotkeyEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Enums.HotkeyButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ProcessingHotkeyEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ProcessingHotkeyEventArgs.Player"/></param>
            <param name="hotkey"><inheritdoc cref="P:Exiled.Events.EventArgs.ProcessingHotkeyEventArgs.Hotkey"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ProcessingHotkeyEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ProcessingHotkeyEventArgs.Player">
            <summary>
            Gets the player who's pressing the hotkey.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ProcessingHotkeyEventArgs.Hotkey">
            <summary>
            Gets the pressed hotkey.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ProcessingHotkeyEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the hotkey is allowed to be pressed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ReceivingEffectEventArgs">
            <summary>
            Contains all information before a player receives a <see cref="T:CustomPlayerEffects.PlayerEffect"/>.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ReceivingEffectEventArgs.#ctor(Exiled.API.Features.Player,CustomPlayerEffects.PlayerEffect,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ReceivingEffectEventArgs"/> class.
            </summary>
            <param name="player">The <see cref="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.Player"/> receiving the effect.</param>
            <param name="effect">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> being added to the player.</param>
            <param name="state">The state the effect is being changed to.</param>
            <param name="currentState">The current state of the effect being changed.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.Player">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.Player"/> receiving the effect.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.Effect">
            <summary>
            Gets the <see cref="T:CustomPlayerEffects.PlayerEffect"/> being received.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the effect will be applied.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.Duration">
            <summary>
            Gets or sets a value indicating how long the effect will last.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.State">
            <summary>
            Gets or sets the value of the new state of the effect. Setting this to 0 is the same as setting IsAllowed to false.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.CurrentState">
            <summary>
            Gets the value of the current state of this effect on the player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.RecontainedEventArgs">
            <summary>
            Contains informations after SCP-079 recontainming.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.RecontainedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.RecontainedEventArgs"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.RecontainedEventArgs.Target"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.RecontainedEventArgs.Target">
            <summary>
            Gets the player that previously controlled SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ReloadingWeaponEventArgs">
            <summary>
            Contains all information before a player's weapon is reloaded.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ReloadingWeaponEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.Firearm">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.Firearm"/> being reloaded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.Player">
            <summary>
            Gets the player who's reloading the weapon.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the weapon can be reloaded.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.RemovingHandcuffsEventArgs">
            <summary>
            Contains all informations before freeing a handcuffed player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.RemovingHandcuffsEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.RemovingHandcuffsEventArgs"/> class.
            </summary>
            <param name="cuffer">The cuffer player.</param>
            <param name="target">The target player to be uncuffed.</param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.ReportingCheaterEventArgs">
            <summary>
            Contains all informations before reporting a cheater.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ReportingCheaterEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ReportingCheaterEventArgs"/> class.
            </summary>
            <param name="reporter"><inheritdoc cref="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reporter"/></param>
            <param name="reported"><inheritdoc cref="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reported"/></param>
            <param name="serverPort"><inheritdoc cref="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.ServerPort"/></param>
            <param name="reason"><inheritdoc cref="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reason"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reporter">
            <summary>
            Gets the reporter player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reported">
            <summary>
            Gets the reported player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.ServerPort">
            <summary>
            Gets the server id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reason">
            <summary>
            Gets or sets the report reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the report will be sent.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.RespawningTeamEventArgs">
            <summary>
            Contains all informations before spawning a wave of <see cref="F:Respawning.SpawnableTeamType.NineTailedFox"/> or <see cref="F:Respawning.SpawnableTeamType.ChaosInsurgency"/>.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.RespawningTeamEventArgs.#ctor(System.Collections.Generic.List{Exiled.API.Features.Player},System.Int32,Respawning.SpawnableTeamType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.RespawningTeamEventArgs"/> class.
            </summary>
            <param name="players"><inheritdoc cref="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.Players"/></param>
            <param name="maxRespawn"><inheritdoc cref="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.MaximumRespawnAmount"/></param>
            <param name="nextKnownTeam"><inheritdoc cref="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.NextKnownTeam"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.Players">
            <summary>
            Gets the list of players that are going to be respawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.MaximumRespawnAmount">
            <summary>
            Gets or sets the maximum amount of respawnable players.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.NextKnownTeam">
            <summary>
            Gets or sets a value indicating what the next respawnable team is.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the spawn can occur.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.SpawnableTeam">
            <summary>
            Gets the current spawnable team.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.RoundEndedEventArgs">
            <summary>
            Contains all information before ending a round.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.RoundEndedEventArgs.#ctor(Exiled.API.Enums.LeadingTeam,RoundSummary.SumInfo_ClassList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.RoundEndedEventArgs"/> class.
            </summary>
            <param name="leadingTeam"><inheritdoc cref="P:Exiled.Events.EventArgs.RoundEndedEventArgs.LeadingTeam"/></param>
            <param name="classList"><inheritdoc cref="P:Exiled.Events.EventArgs.RoundEndedEventArgs.ClassList"/></param>
            <param name="timeToRestart"><inheritdoc cref="P:Exiled.Events.EventArgs.RoundEndedEventArgs.TimeToRestart"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.RoundEndedEventArgs.LeadingTeam">
            <summary>
            Gets the leading team.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.RoundEndedEventArgs.ClassList">
            <summary>
            Gets or sets the round summary class list.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.RoundEndedEventArgs.TimeToRestart">
            <summary>
            Gets or sets the time to restart the next round.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.SendingCassieMessageEventArgs">
            <summary>
            Contains all the information after sending a C.A.S.S.I.E. message.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.SendingCassieMessageEventArgs.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.SendingCassieMessageEventArgs"/> class.
            </summary>
            <param name="words"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingCassieMessageEventArgs.Words"/></param>
            <param name="makeHold"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingCassieMessageEventArgs.MakeHold"/></param>
            <param name="makeNoise"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingCassieMessageEventArgs.MakeNoise"/></param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingCassieMessageEventArgs.Words">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingCassieMessageEventArgs.MakeHold">
            <summary>
            Gets or sets a value indicating whether or not the message should be held.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingCassieMessageEventArgs.MakeNoise">
            <summary>
            Gets or sets a value indicating whether or not the message should make noise.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingCassieMessageEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the message can be sent.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ShootingEventArgs">
            <summary>
            Contains all information before a player fires a weapon.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ShootingEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Firearms.BasicMessages.ShotMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ShootingEventArgs"/> class.
            </summary>
            <param name="shooter"><inheritdoc cref="P:Exiled.Events.EventArgs.ShootingEventArgs.Shooter"/></param>
            <param name="msg"><inheritdoc cref="P:Exiled.Events.EventArgs.ShootingEventArgs.ShotMessage"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShootingEventArgs.Shooter">
            <summary>
            Gets the player who's shooting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShootingEventArgs.ShotMessage">
            <summary>
            Gets or sets the <see cref="P:Exiled.Events.EventArgs.ShootingEventArgs.ShotMessage"/> for the event.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShootingEventArgs.ShotPosition">
            <summary>
            Gets or sets the position of the shot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShootingEventArgs.TargetNetId">
            <summary>
            Gets or sets the netId of the target of the shot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShootingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the shot can be fired.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ShotEventArgs">
            <summary>
            Contains all information after a player has fired a weapon.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ShotEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.RaycastHit,IDestructible,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ShotEventArgs"/> class.
            </summary>
            <param name="shooter"><inheritdoc cref="P:Exiled.Events.EventArgs.ShotEventArgs.Shooter"/></param>
            <param name="destructible">The <see cref="T:IDestructible"/> hit.</param>
            <param name="hit"><inheritdoc cref="P:Exiled.Events.EventArgs.ShotEventArgs.Distance"/></param>
            <param name="damage"><inheritdoc cref="P:Exiled.Events.EventArgs.ShotEventArgs.Damage"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.Shooter">
            <summary>
            Gets the player who shot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.Target">
            <summary>
            Gets the target of the shot. Can be null!.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.Hitbox">
            <summary>
            Gets the hitbox type of the shot. Can be null!.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.Distance">
            <summary>
            Gets the shot distance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.Damage">
            <summary>
            Gets or sets the inflicted damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.CanHurt">
            <summary>
            Gets or sets a value indicating whether or not the shot can hurt the target.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.SpawningEventArgs">
            <summary>
            Contains all information before spawning a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.SpawningEventArgs.#ctor(Exiled.API.Features.Player,RoleType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.SpawningEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningEventArgs.Player"/></param>
            <param name="roleType"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningEventArgs.RoleType"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningEventArgs.Player">
            <summary>
            Gets the spawning player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningEventArgs.RoleType">
            <summary>
            Gets the player role type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningEventArgs.Position">
            <summary>
            Gets or sets the player's spawning position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningEventArgs.RotationY">
            <summary>
            Gets or sets the rotation y axis of the player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.SpawningItemEventArgs">
            <summary>
            Contains all information before the server spawns an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.SpawningItemEventArgs.#ctor(InventorySystem.Items.Pickups.ItemPickupBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.SpawningItemEventArgs"/> class.
            </summary>
            <param name="pickupBase"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningItemEventArgs.Pickup"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningItemEventArgs.Pickup">
            <summary>
            Gets or sets a value indicating the pickup being spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the item can be spawned.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.SpawningRagdollEventArgs">
            <summary>
            Contains all informations before spawning a player ragdoll.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.SpawningRagdollEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,RoleType,PlayerStats.HitInfo,System.Boolean,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.SpawningRagdollEventArgs"/> class.
            </summary>
            <param name="killer"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Killer"/></param>
            <param name="owner"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Owner"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Position"/></param>
            <param name="rotation"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Rotation"/></param>
            <param name="velocity"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Velocity"/></param>
            <param name="roleType"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.RoleType"/></param>
            <param name="hinInformations"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.HitInformations"/></param>
            <param name="isRecallAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.IsRecallAllowed"/></param>
            <param name="dissonanceId"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.DissonanceId"/></param>
            <param name="playerName"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.PlayerNickname"/></param>
            <param name="playerId"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.PlayerId"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Killer">
            <summary>
            Gets the player who killed the owner of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Owner">
            <summary>
            Gets the owner of the ragdoll (typically the player who died).
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Position">
            <summary>
            Gets or sets the spawning position of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Rotation">
            <summary>
            Gets or sets the ragdoll rotation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Velocity">
            <summary>
            Gets or sets the adapted ragdoll velocity.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.RoleType">
            <summary>
            Gets or sets the RoleType of the ragdoll owner.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.HitInformations">
            <summary>
            Gets or sets the hit informations on the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.IsRecallAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be revived by SCP-049.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.DissonanceId">
            <summary>
            Gets or sets the ragdoll dissonance id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.PlayerNickname">
            <summary>
            Gets or sets the ragdoll player nickname.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.PlayerId">
            <summary>
            Gets or sets the ragdoll player id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the ragdoll will be spawned.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StartingEventArgs">
            <summary>
            Contains all informations before starting the warhead.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StartingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StartingEventArgs"/> class.
            </summary>
            <param name="player">The player who's going to start the warhead.</param>
            <param name="isAllowed">Indicating whether the event can be executed or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingEventArgs.IsAuto">
            <summary>
            Gets a value indicating whether or not the nuke was set off automatically.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StartingRecallEventArgs">
            <summary>
            Contains all informations before SCP-049 begins recalling a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StartingRecallEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StartingRecallEventArgs"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingRecallEventArgs.Target"/></param>
            <param name="scp049"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingRecallEventArgs.Scp049"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingRecallEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingRecallEventArgs.Target">
            <summary>
            Gets the player who's getting recalled.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingRecallEventArgs.Scp049">
            <summary>
            Gets the player who is controlling SCP-049.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingRecallEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the recall can begin.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StartingSpeakerEventArgs">
            <summary>
            Contains all informations before SCP-079 uses a speaker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StartingSpeakerEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Room,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StartingSpeakerEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.Player"/></param>
            <param name="room"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.Room"/></param>
            <param name="auxiliaryPowerCost"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.AuxiliaryPowerCost"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.Room">
            <summary>
            Gets the room that the speaker is located in.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to use a speaker through SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can use the speaker.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StartPryingGateEventArgs">
            <summary>
            Contains all information before SCP-096 begins prying a gate open.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StartPryingGateEventArgs.#ctor(PlayableScps.Scp096,Exiled.API.Features.Player,Interactables.Interobjects.PryableDoor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StartPryingGateEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.Player"/></param>
            <param name="scp096"><inheritdoc cref="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.Scp096"/></param>
            <param name="gate"><inheritdoc cref="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.Gate"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.Scp096">
            <summary>
            Gets the SCP-096 instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.Player">
            <summary>
            Gets the player that is controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.Gate">
            <summary>
            Gets the <see cref="T:Interactables.Interobjects.PryableDoor"/> to be pried open.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.IsAllowed">
            <summary>
            Gets or Sets a value indicating whether or not the gate can be pried open by SCP-096.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StoppingEventArgs">
            <summary>
            Contains all informations before stopping the warhead.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StoppingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StoppingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.StoppingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.StoppingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingEventArgs.Player">
            <summary>
            Gets the player who's going to stop the warhead.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the warhead can be stopped.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StoppingGeneratorEventArgs">
            <summary>
            Contains all informations before a player ejects a tablet from a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StoppingGeneratorEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StoppingGeneratorEventArgs"/> class.
            </summary>
            <param name="player">The player who's ejecting the tablet.</param>
            <param name="generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator"/> instance.</param>
            <param name="isAllowed">Indicates whether or not the tablet can be ejected.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.StoppingSpeakerEventArgs">
            <summary>
            Contains all informations before SCP-079 finishes using a speaker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Room,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StoppingSpeakerEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.Player"/></param>
            <param name="room"><inheritdoc cref="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.Room"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.Room">
            <summary>
            Gets the room that the speaker is located in.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can stop using the speaker.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.SyncingDataEventArgs">
            <summary>
            Contains all informations before syncing player's data with the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.SyncingDataEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector2,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.SyncingDataEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.SyncingDataEventArgs.Player"/></param>
            <param name="speed"><inheritdoc cref="P:Exiled.Events.EventArgs.SyncingDataEventArgs.Speed"/></param>
            <param name="currentAnimation"><inheritdoc cref="P:Exiled.Events.EventArgs.SyncingDataEventArgs.CurrentAnimation"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.SyncingDataEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.SyncingDataEventArgs.Player">
            <summary>
            Gets the player of the syncing data.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SyncingDataEventArgs.Speed">
            <summary>
            Gets the player's speed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SyncingDataEventArgs.CurrentAnimation">
            <summary>
            Gets or sets the current player's animation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SyncingDataEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player's data can be synced with the server.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.TeleportingEventArgs">
            <summary>
            Contains all informations before SCP-106 teleports using a portal.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.TeleportingEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.TeleportingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.TeleportingEventArgs.Player"/></param>
            <param name="portalPosition"><inheritdoc cref="P:Exiled.Events.EventArgs.TeleportingEventArgs.PortalPosition"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.TeleportingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.TeleportingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-106.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TeleportingEventArgs.PortalPosition">
            <summary>
            Gets or sets the portal position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TeleportingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-106 can teleport using a portal.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ThrowingItemEventArgs">
            <summary>
            Contains all information before a player throws a grenade.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ThrowingItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ThrowableProjectiles.ThrowableItem,InventorySystem.Items.ThrowableProjectiles.ThrowableNetworkHandler.RequestType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ThrowingItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ThrowingItemEventArgs.Player"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.ThrowingItemEventArgs.Item"/></param>
            <param name="request"><inheritdoc cref="P:Exiled.Events.EventArgs.ThrowingItemEventArgs.RequestType"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ThrowingItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ThrowingItemEventArgs.Player">
            <summary>
            Gets the player who's throwing the grenade.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ThrowingItemEventArgs.Item">
            <summary>
            Gets or sets the item being thrown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ThrowingItemEventArgs.RequestType">
            <summary>
             Gets or sets the type of throw being requested.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ThrowingItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the grenade can be thrown.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.TriggeringDoorEventArgs">
            <summary>
            Contains all informations before SCP-079 interacts with a door.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.TriggeringDoorEventArgs.#ctor(Exiled.API.Features.Player,Interactables.Interobjects.DoorUtils.DoorVariant,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.TriggeringDoorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Player"/></param>
            <param name="door"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Door"/></param>
            <param name="auxiliaryPowerCost"><inheritdoc cref="P:Exiled.Events.EventArgs.TriggeringDoorEventArgs.AuxiliaryPowerCost"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.TriggeringDoorEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to trigger a door through SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.TriggeringTeslaEventArgs">
            <summary>
            Contains all informations before triggering a tesla.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.TriggeringTeslaEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.Player"/></param>
            <param name="isInHurtingRange"><inheritdoc cref="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.IsInHurtingRange"/></param>
            <param name="isTriggerable"><inheritdoc cref="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.IsTriggerable"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.Player">
            <summary>
            Gets the player who triggered the tesla.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.IsInHurtingRange">
            <summary>
            Gets or sets a value indicating whether or not the player is in hurting range.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.IsTriggerable">
            <summary>
            Gets or sets a value indicating whether or not the tesla is going to be activated.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.TryingNotToCryEventArgs">
            <summary>
            Contains all informations before SCP-096 tries not to cry.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.TryingNotToCryEventArgs.#ctor(PlayableScps.Scp096,Exiled.API.Features.Player,Interactables.Interobjects.DoorUtils.DoorVariant,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.TryingNotToCryEventArgs"/> class.
            </summary>
            <param name="scp096"><inheritdoc cref="P:Exiled.Events.EventArgs.TryingNotToCryEventArgs.Scp096"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.TryingNotToCryEventArgs.Player"/></param>
            <param name="door"><inheritdoc cref="P:Exiled.Events.EventArgs.TryingNotToCryEventArgs.Door"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.TryingNotToCryEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.TryingNotToCryEventArgs.Scp096">
            <summary>
            Gets the SCP-096 instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TryingNotToCryEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TryingNotToCryEventArgs.Door">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.TryingNotToCryEventArgs.Door"/> to be cried on.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TryingNotToCryEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-096 can try not to cry.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs">
            <summary>
            Contains all informations before a generator is unlocked.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.Player"/></param>
            <param name="generator"><inheritdoc cref="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.Generator"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.Player">
            <summary>
            Gets the player who's unlocking the generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.Generator">
            <summary>
            Gets the generator that is going to be unlocked.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the generator can be unlocked.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs">
            <summary>
            Contains all information before SCP-914 upgrades an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ItemBase,Scp914.Scp914KnobSetting,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.Player"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.Item"/></param>
            <param name="knobSetting"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.KnobSetting"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.Scp914">
            <summary>
            Gets the <see cref="T:Scp914.Scp914Controller"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.Player">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.Player"/> who owns the item to be upgraded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.Item">
            <summary>
            Gets a list of items to be upgraded inside SCP-914.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.KnobSetting">
            <summary>
            Gets or sets SCP-914 working knob setting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the upgrade is successful.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UpgradingItemEventArgs">
            <summary>
            Contains all information before SCP-914 upgrades an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UpgradingItemEventArgs.#ctor(InventorySystem.Items.Pickups.ItemPickupBase,UnityEngine.Vector3,Scp914.Scp914KnobSetting,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UpgradingItemEventArgs"/> class.
            </summary>
            <param name="item"><inheritdoc cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/></param>
            <param name="newPos"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingItemEventArgs.OutputPosition"/></param>
            <param name="knobSetting"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingItemEventArgs.KnobSetting"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingItemEventArgs.Scp914">
            <summary>
            Gets the <see cref="T:Scp914.Scp914Controller"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingItemEventArgs.OutputPosition">
            <summary>
            Gets or sets the position the item will be output to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingItemEventArgs.Item">
            <summary>
            Gets a list of items to be upgraded inside SCP-914.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingItemEventArgs.KnobSetting">
            <summary>
            Gets or sets SCP-914 working knob setting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the upgrade is successful.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UpgradingPlayerEventArgs">
            <summary>
            Contains all information before SCP-914 upgrades a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean,Scp914.Scp914KnobSetting,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UpgradingPlayerEventArgs"/> class.
            </summary>
            <param name="player">The <see cref="P:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.Player"/> being upgraded.</param>
            <param name="heldOnly"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.HeldOnly"/></param>
            <param name="setting">The <see cref="T:Scp914.Scp914KnobSetting"/> being used.</param>
            <param name="upgradeItems"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.UpgradeItems"/></param>
            <param name="moveVector"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.OutputPosition"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.Player">
            <summary>
            Gets the player being upgraded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.OutputPosition">
            <summary>
            Gets or sets the location the player will be teleported to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the event can continue.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.UpgradeItems">
            <summary>
            Gets or sets a value indicating whether or not items will be upgraded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.HeldOnly">
            <summary>
            Gets or sets a value indicating whether or not only held items are upgraded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingPlayerEventArgs.KnobSetting">
            <summary>
            Gets or sets the <see cref="T:Scp914.Scp914KnobSetting"/> being used.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UsedItemEventArgs">
            <summary>
            Contains all information after a player used an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UsedItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UsedItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.UsedItemEventArgs.Player"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.UsedItemEventArgs.Item"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsedItemEventArgs.Player">
            <summary>
            Gets the player who used the medical item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsedItemEventArgs.Item">
            <summary>
            Gets the medical item that the player consumed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UsingItemEventArgs">
            <summary>
            Contains all information before a player uses a medical item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UsingItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Usables.UsableItem,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UsingItemEventArgs"/> class.
            </summary>
            <param name="player">The player who's going to use the medical item.</param>
            <param name="cooldown"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingItemEventArgs.Cooldown"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.UsedItemEventArgs.Item"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingItemEventArgs.Cooldown">
            <summary>
            Gets or sets the medical item cooldown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can use the medical item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs">
            <summary>
            Contains all information before MicroHID energy is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.MicroHID.MicroHIDItem,InventorySystem.Items.MicroHID.HidState,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.Player"/></param>
            <param name="microHIDitem"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.MicroHID"/></param>
            <param name="currentState"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.CurrentState"/></param>
            <param name="drain"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.Drain"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.Player">
            <summary>
            Gets the player who's using the MicroHID.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.MicroHID">
            <summary>
            Gets the MicroHID instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.CurrentState">
            <summary>
            Gets the current state of the MicroHID.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.Drain">
            <summary>
            Gets or sets the MicroHID energy drain.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the MicroHID energy can be changed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs">
            <summary>
            Contains all informations before radio battery charge is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs.#ctor(InventorySystem.Items.Radio.RadioItem,Exiled.API.Features.Player,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs"/> class.
            </summary>
            <param name="radio"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs.Radio"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs.Player"/></param>
            <param name="drain"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs.Drain"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs.Radio">
            <summary>
            Gets the Radio which is being used.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs.Player">
            <summary>
            Gets the player who's using the radio.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs.Drain">
            <summary>
            Gets or sets the radio battery drain per second.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the radio battery charge can be changed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.VerifiedEventArgs">
            <summary>
            Contains all informations after the server verifies a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.VerifiedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.VerifiedEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.VerifiedEventArgs.Player"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.VerifiedEventArgs.Player">
            <summary>
            Gets the verified player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.WalkingOnSinkholeEventArgs">
            <summary>
            Contains all information before a player walks over a sinkhole.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.WalkingOnSinkholeEventArgs.#ctor(Exiled.API.Features.Player,SinkholeEnvironmentalHazard,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.WalkingOnSinkholeEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.WalkingOnSinkholeEventArgs.Player"/></param>
            <param name="sinkhole"><inheritdoc cref="T:SinkholeEnvironmentalHazard"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.WalkingOnSinkholeEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.WalkingOnSinkholeEventArgs.Player">
            <summary>
            Gets the player walking on the sinkhole.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.WalkingOnSinkholeEventArgs.Sinkhole">
            <summary>
            Gets the sinkhole that the player is walking on.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.WalkingOnSinkholeEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player's data can be synced with the server.
            </summary>
        </member>
        <member name="T:Exiled.Events.Events">
            <summary>
            Patch and unpatch events into the game.
            </summary>
        </member>
        <member name="F:Exiled.Events.Events.patchesCounter">
            <summary>
            The below variable is used to increment the name of the harmony instance, otherwise harmony will not work upon a plugin reload.
            </summary>
        </member>
        <member name="T:Exiled.Events.Events.CustomEventHandler`1">
            <summary>
            The custom <see cref="T:System.EventHandler"/> delegate.
            </summary>
            <typeparam name="TEventArgs">The <see cref="T:System.EventHandler`1"/> type.</typeparam>
            <param name="ev">The <see cref="T:System.EventHandler`1"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Events.CustomEventHandler">
            <summary>
            The custom <see cref="T:System.EventHandler"/> delegate, with empty parameters.
            </summary>
        </member>
        <member name="P:Exiled.Events.Events.Instance">
            <summary>
            Gets the plugin instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.Events.DisabledPatchesHashSet">
            <summary>
            Gets a set of types and methods for which EXILED patches should not be run.
            </summary>
        </member>
        <member name="P:Exiled.Events.Events.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Events.Harmony">
            <summary>
            Gets the <see cref="T:HarmonyLib.Harmony"/> instance.
            </summary>
        </member>
        <member name="M:Exiled.Events.Events.OnEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Events.OnDisabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Events.Patch">
            <summary>
            Patches all events.
            </summary>
        </member>
        <member name="M:Exiled.Events.Events.ReloadDisabledPatches">
            <summary>
            Checks the <see cref="P:Exiled.Events.Events.DisabledPatchesHashSet"/> list and un-patches any methods that have been defined there. Once un-patching has been done, they can be patched by plugins, but will not be re-patchable by Exiled until a server reboot.
            </summary>
        </member>
        <member name="M:Exiled.Events.Events.Unpatch">
            <summary>
            Unpatches all events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Extensions.Event">
            <summary>
            A set of tools to execute events safely and without breaking other plugins.
            </summary>
        </member>
        <member name="M:Exiled.Events.Extensions.Event.InvokeSafely``1(Exiled.Events.Events.CustomEventHandler{``0},``0)">
            <summary>
            Executes all <see cref="T:Exiled.Events.Events.CustomEventHandler`1"/> listeners safely.
            </summary>
            <typeparam name="T">Event arg type.</typeparam>
            <param name="ev">Source event.</param>
            <param name="arg">Event arg.</param>
            <exception cref="T:System.ArgumentNullException">Event or its arg is null.</exception>
        </member>
        <member name="M:Exiled.Events.Extensions.Event.InvokeSafely(Exiled.Events.Events.CustomEventHandler)">
            <summary>
            Executes all <see cref="T:Exiled.Events.Events.CustomEventHandler"/> listeners safely.
            </summary>
            <param name="ev">Source event.</param>
            <exception cref="T:System.ArgumentNullException">Event is null.</exception>
        </member>
        <member name="T:Exiled.Events.Handlers.Cassie">
            <summary>
            Cassie related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Cassie.SendingCassieMessage">
            <summary>
            Invoked before sending a cassie message.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Cassie.OnSendingCassieMessage(Exiled.Events.EventArgs.SendingCassieMessageEventArgs)">
            <summary>
            Called before sending a cassie message.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.SendingCassieMessageEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Internal.MapGenerated">
            <summary>
            Handles <see cref="E:Exiled.Events.Handlers.Map.Generated"/> event.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.MapGenerated.OnMapGenerated">
            <summary>
            Called once the map is generated.
            </summary>
            <remarks>
            This fixes an issue where
            all those extensions that
            require calling the central
            property of the Map class in
            the API were corrupted due to
            a missed call, such as before
            getting the elevator type.
            </remarks>
        </member>
        <member name="T:Exiled.Events.Handlers.Internal.Round">
            <summary>
            Handles some round clean-up events and some others related to players.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.Round.OnWaitingForPlayers">
            <inheritdoc cref="M:Exiled.Events.Handlers.Server.OnWaitingForPlayers"/>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.Round.OnRestartingRound">
            <inheritdoc cref="M:Exiled.Events.Handlers.Server.OnRestartingRound"/>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.Round.OnRoundStarted">
            <inheritdoc cref="M:Exiled.Events.Handlers.Server.OnRoundStarted"/>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.Round.OnChangingRole(Exiled.Events.EventArgs.ChangingRoleEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnChangingRole(Exiled.Events.EventArgs.ChangingRoleEventArgs)"/>
        </member>
        <member name="T:Exiled.Events.Handlers.Internal.SceneUnloaded">
            <summary>
            Handles scene unload event.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.SceneUnloaded.OnSceneUnloaded(UnityEngine.SceneManagement.Scene)">
            <summary>
            Called once when the server changes the scene.
            </summary>
            <remarks>
            This fixes the main issue with ghost mode,
            when it spams with a NRE error.
            Before that, we were clearing the cache
            on WaitForPlayers event, but
            sometimes (ordinally on silent rount restart)
            the server accepts players' tokens before
            WaitForPlayers event is called.
            </remarks>
        </member>
        <member name="T:Exiled.Events.Handlers.Item">
            <summary>
            Item related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Item.ChangingDurability">
            <summary>
            Invoked before the durability of an item is changed.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Item.ChangingAttachments">
            <summary>
            Invoked before item attachments are changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Item.OnChangingDurability(Exiled.Events.EventArgs.ChangingDurabilityEventArgs)">
            <summary>
            Called before the durability of an item is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingDurabilityEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Item.OnChangingAttachments(Exiled.Events.EventArgs.ChangingAttachmentsEventArgs)">
            <summary>
            Called before item attachments are changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingAttachmentsEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Map">
            <summary>
            Map related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.PlacingBulletHole">
            <summary>
            Invoked before placing decals.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.PlacingBlood">
            <summary>
            Invoked before placing bloods.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.AnnouncingDecontamination">
            <summary>
            Invoked before announcing the light containment zone decontamination.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.AnnouncingScpTermination">
            <summary>
            Invoked before announcing an SCP termination.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.AnnouncingNtfEntrance">
            <summary>
            Invoked before announcing the NTF entrance.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.GeneratorActivated">
            <summary>
            Invoked after a <see cref="T:MapGeneration.Distributors.Scp079Generator"/> has been activated.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.Decontaminating">
            <summary>
            Invoked before decontaminating the light containment zone.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.DamagingWindow">
            <summary>
            Invoked before damaging a window.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.ExplodingGrenade">
            <summary>
            Invoked before a grenade explodes.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.SpawningItem">
            <summary>
            Invoked before an item is spawned.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.Generated">
            <summary>
            Invoked after the map is generated.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.ChangingIntoGrenade">
            <summary>
            Invoked before the server changes a pickup into a grenade, when triggered by an explosion.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnPlacingBulletHole(Exiled.Events.EventArgs.PlacingBulletHole)">
            <summary>
            Called before placing a decal.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingBulletHole"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnPlacingBlood(Exiled.Events.EventArgs.PlacingBloodEventArgs)">
            <summary>
            Called before placing bloods.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingBulletHole"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnAnnouncingDecontamination(Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs)">
            <summary>
            Called before announcing the light containment zone decontamination.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingBulletHole"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnAnnouncingScpTermination(Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs)">
            <summary>
            Called before announcing an SCP termination.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingBulletHole"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnAnnouncingNtfEntrance(Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs)">
            <summary>
            Called before announcing the NTF entrance.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingBulletHole"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnGeneratorActivated(Exiled.Events.EventArgs.GeneratorActivatedEventArgs)">
            <summary>
            Called after a <see cref="T:MapGeneration.Distributors.Scp079Generator"/> has been activated.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.GeneratorActivatedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnDecontaminating(Exiled.Events.EventArgs.DecontaminatingEventArgs)">
            <summary>
            Called before decontaminating the light containment zone.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DecontaminatingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnDamagingWindow(Exiled.Events.EventArgs.DamagingWindowEventArgs)">
            <summary>
            Called before damaging a window.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DamagingWindowEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnExplodingGrenade(Exiled.Events.EventArgs.ExplodingGrenadeEventArgs)">
            <summary>
            Called before a grenade explodes.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnSpawningItem(Exiled.Events.EventArgs.SpawningItemEventArgs)">
            <summary>
            Called before an item is spawned.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.SpawningItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnGenerated">
            <summary>
            Called after the map is generated.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnChangingIntoGrenade(Exiled.Events.EventArgs.ChangingIntoGrenadeEventArgs)">
            <summary>
            Called before the server changes a <see cref="T:Exiled.API.Features.Items.Pickup"/> into a live Grenade when hit by an explosion.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingIntoGrenadeEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Player">
            <summary>
            Player related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.PreAuthenticating">
            <summary>
            Invoked before authenticating a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Kicking">
            <summary>
            Invoked before kicking a player from the server.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Kicked">
            <summary>
            Invoked after a player has been kicked from the server.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Banning">
            <summary>
            Invoked before banning a player from the server.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Banned">
            <summary>
            Invoked after a player has been banned from the server.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ItemUsed">
            <summary>
            Invoked after a player uses a medical item.
            </summary>
            <remarks>
            Invoked after <see cref="E:Exiled.Events.Handlers.Player.ItemUsed"/>, if a player's class has
            changed during their health increase, won't fire.
            </remarks>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.CancellingItemUse">
            <summary>
            Invoked after a player has stopped the use of a medical item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Interacted">
            <summary>
            Invoked after a player interacted with something.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.SpawningRagdoll">
            <summary>
            Invoked before spawning a player's ragdoll.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ActivatingWarheadPanel">
            <summary>
            Invoked before activating the warhead panel.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ActivatingWorkstation">
            <summary>
            Invoked before activating a workstation.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.DeactivatingWorkstation">
            <summary>
            Invoked before deactivating a workstation.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.UsingItem">
            <summary>
            Invoked before using a medical item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Joined">
            <summary>
            Invoked after a player has joined the server.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Verified">
            <summary>
            Ivoked after a player has been verified.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Left">
            <summary>
            Invoked after a player has left the server.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Destroying">
            <summary>
            Invoked before destroying a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Hurting">
            <summary>
            Invoked before hurting a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Dying">
            <summary>
            Invoked before a player dies.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Died">
            <summary>
            Invoked after a player died.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ChangingRole">
            <summary>
            Invoked before changing a player's role.
            </summary>
            <remarks>If you set IsAllowed to false when Escape is true, tickets will still be given to the escapee's team even though they will 'fail' to escape. Use <see cref="E:Exiled.Events.Handlers.Player.Escaping"/> to block escapes instead.</remarks>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ThrowingItem">
            <summary>
            Invoked before throwing an item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.DroppingItem">
            <summary>
            Invoked before dropping an item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.DroppingNull">
            <summary>
            Invoked before dropping a null item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.PickingUpAmmo">
            <summary>
            Invoked before picking up ammo.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.PickingUpArmor">
            <summary>
            Invoked before picking up armor.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.PickingUpItem">
            <summary>
            Invoked before picking up an item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Handcuffing">
            <summary>
            Invoked before handcuffing a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.RemovingHandcuffs">
            <summary>
            Invoked before freeing a handcuffed player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Escaping">
            <summary>
            Invoked before a player escapes.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.IntercomSpeaking">
            <summary>
            Invoked before a player begins speaking to the intercom.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Shot">
            <summary>
            Invoked after a player gets shot.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Shooting">
            <summary>
            Invoked before a player shoots a weapon.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.EnteringPocketDimension">
            <summary>
            Invoked before a player enters the pocket dimension.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.EscapingPocketDimension">
            <summary>
            Invoked before a player escapes the pocket dimension.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.FailingEscapePocketDimension">
            <summary>
            Invoked before a player fails to escape the pocket dimension.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ReloadingWeapon">
            <summary>
            Invoked before a player reloads a weapon.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Spawning">
            <summary>
            Invoked before spawning a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.EnteringFemurBreaker">
            <summary>
            Invoked before a player enters the femur breaker.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.SyncingData">
            <summary>
            Invoked before syncing player's data.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ChangingItem">
            <summary>
            Invoked before a player's held item changes.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ChangingGroup">
            <summary>
            Invoked before changing a player's group.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.InteractingDoor">
            <summary>
            Invoked before a player interacts with a door.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.InteractingElevator">
            <summary>
            Invoked before a player interacts with an elevator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.InteractingLocker">
            <summary>
            Invoked before a player interacts with a locker.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.TriggeringTesla">
            <summary>
            Invoked before a player triggers a tesla gate.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.UnlockingGenerator">
            <summary>
            Invoked before a player unlocks a generator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.OpeningGenerator">
            <summary>
            Invoked before a player opens a generator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ClosingGenerator">
            <summary>
            Invoked before a player closes a generator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ActivatingGenerator">
            <summary>
            Invoked before a player inserts a workstation tablet into a generator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.StoppingGenerator">
            <summary>
            Invoked before a player ejects the workstation tablet out of a generator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ReceivingEffect">
            <summary>
            Invoked before a player receives a status effect.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ChangingMuteStatus">
            <summary>
            Invoked before an user's mute status is changed.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ChangingIntercomMuteStatus">
            <summary>
            Invoked before an user's intercom mute status is changed.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.UsingRadioBattery">
            <summary>
            Invoked before a user's radio battery charge is changed.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ChangingRadioPreset">
            <summary>
            Invoked before a user's radio preset is changed.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ChangingMicroHIDState">
            <summary>
            Invoked before a player's MicroHID state is changed.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.UsingMicroHIDEnergy">
            <summary>
            Invoked before a player's MicroHID energy is changed.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ProcessingHotkey">
            <summary>
            Called before processing a hotkey.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.WalkingOnSinkhole">
            <summary>
            Called before a player walks on a sinkhole.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.InteractingShootingTarget">
            <summary>
            Invoked before a player interacts with a shooting target.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.DamagingShootingTarget">
            <summary>
            Invoked before a player damages a shooting target.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.FlippingCoin">
            <summary>
            Invoked before a player flips a coin.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnPreAuthenticating(Exiled.Events.EventArgs.PreAuthenticatingEventArgs)">
            <summary>
            Called before pre-authenticating a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PreAuthenticatingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnKicking(Exiled.Events.EventArgs.KickingEventArgs)">
            <summary>
            Called before kicking a player from the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.KickingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnKicked(Exiled.Events.EventArgs.KickedEventArgs)">
            <summary>
            Called after a player has been kicked from the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.KickedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnBanning(Exiled.Events.EventArgs.BanningEventArgs)">
            <summary>
            Called before banning a player from the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.BanningEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnBanned(Exiled.Events.EventArgs.BannedEventArgs)">
            <summary>
            Called after a player has been banned from the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.BannedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnItemUsed(Exiled.Events.EventArgs.UsedItemEventArgs)">
            <summary>
            Called after a player used a medical item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UsedItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnCancellingItemUse(Exiled.Events.EventArgs.CancellingItemUseEventArgs)">
            <summary>
            Called after a player has stopped the use of a medical item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.CancellingItemUseEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteracted(Exiled.Events.EventArgs.InteractedEventArgs)">
            <summary>
            Called after a player interacted with something.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.InteractedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSpawningRagdoll(Exiled.Events.EventArgs.SpawningRagdollEventArgs)">
            <summary>
            Called before spawning a player's ragdoll.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.SpawningRagdollEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnActivatingWarheadPanel(Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs)">
            <summary>
            Called before activating the warhead panel.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnActivatingWorkstation(Exiled.Events.EventArgs.ActivatingWorkstationEventArgs)">
            <summary>
            Called before activating a workstation.
            </summary>
            <param name="ev">The <see cref="E:Exiled.Events.Handlers.Player.ActivatingWorkstation"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDeactivatingWorkstation(Exiled.Events.EventArgs.DeactivatingWorkstationEventArgs)">
            <summary>
            Called before deactivating a workstation.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DeactivatingWorkstationEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUsingItem(Exiled.Events.EventArgs.UsingItemEventArgs)">
            <summary>
            Called before using a medical item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UsingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnJoined(Exiled.Events.EventArgs.JoinedEventArgs)">
            <summary>
            Called after a player has joined the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.JoinedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnVerified(Exiled.Events.EventArgs.VerifiedEventArgs)">
            <summary>
            Called after a player has been verified.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.VerifiedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnLeft(Exiled.Events.EventArgs.LeftEventArgs)">
            <summary>
            Called after a player has left the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.LeftEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDestroying(Exiled.Events.EventArgs.DestroyingEventArgs)">
            <summary>
            Called before destroying a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DestroyingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnHurting(Exiled.Events.EventArgs.HurtingEventArgs)">
            <summary>
            Called before hurting a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.HurtingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDying(Exiled.Events.EventArgs.DyingEventArgs)">
            <summary>
            Called before a player dies.
            </summary>
            <param name="ev"><see cref="T:Exiled.Events.EventArgs.DyingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDied(Exiled.Events.EventArgs.DiedEventArgs)">
            <summary>
            Called after a player died.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DiedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingRole(Exiled.Events.EventArgs.ChangingRoleEventArgs)">
            <summary>
            Called before changing a player's role.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingRoleEventArgs"/> instance.</param>
            <remarks>If you set IsAllowed to false when Escape is true, tickets will still be given to the escapee's team even though they will 'fail' to escape. Use <see cref="E:Exiled.Events.Handlers.Player.Escaping"/> to block escapes instead.</remarks>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnThrowingItem(Exiled.Events.EventArgs.ThrowingItemEventArgs)">
            <summary>
            Called before throwing a grenade.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ThrowingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDroppingItem(Exiled.Events.EventArgs.DroppingItemEventArgs)">
            <summary>
            Called before dropping an item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DroppingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDroppingNull(Exiled.Events.EventArgs.DroppingNullEventArgs)">
            <summary>
            Called before dropping a null item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DroppingNullEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnPickingUpAmmo(Exiled.Events.EventArgs.PickingUpAmmoEventArgs)">
            <summary>
            Called before a player picks up ammo.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PickingUpAmmoEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnPickingUpArmor(Exiled.Events.EventArgs.PickingUpArmorEventArgs)">
            <summary>
            Called before a player picks up armor.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PickingUpArmorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnPickingUpItem(Exiled.Events.EventArgs.PickingUpItemEventArgs)">
            <summary>
            Called before a user picks up an item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PickingUpItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnHandcuffing(Exiled.Events.EventArgs.HandcuffingEventArgs)">
            <summary>
            Called before handcuffing a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.HandcuffingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnRemovingHandcuffs(Exiled.Events.EventArgs.RemovingHandcuffsEventArgs)">
            <summary>
            Called before freeing a handcuffed player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.RemovingHandcuffsEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEscaping(Exiled.Events.EventArgs.EscapingEventArgs)">
            <summary>
            Called before a player escapes.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EscapingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnIntercomSpeaking(Exiled.Events.EventArgs.IntercomSpeakingEventArgs)">
            <summary>
            Called before a player begins speaking to the intercom.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.IntercomSpeakingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnShot(Exiled.Events.EventArgs.ShotEventArgs)">
            <summary>
            Called after a player shoots a weapon.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ShotEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnShooting(Exiled.Events.EventArgs.ShootingEventArgs)">
            <summary>
            Called before a player shoots a weapon.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ShootingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEnteringPocketDimension(Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs)">
            <summary>
            Called before a player enters the pocket dimension.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEscapingPocketDimension(Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs)">
            <summary>
            Called before a player escapes the pocket dimension.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnFailingEscapePocketDimension(Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs)">
            <summary>
            Called before a player fails to escape the pocket dimension.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnReloadingWeapon(Exiled.Events.EventArgs.ReloadingWeaponEventArgs)">
            <summary>
            Called before a player reloads a weapon.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ReloadingWeaponEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSpawning(Exiled.Events.EventArgs.SpawningEventArgs)">
            <summary>
            Called before spawning a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.SpawningEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEnteringFemurBreaker(Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs)">
            <summary>
            Called before a player enters the femur breaker.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSyncingData(Exiled.Events.EventArgs.SyncingDataEventArgs)">
            <summary>
            Called before syncing player's data.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.SyncingDataEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingItem(Exiled.Events.EventArgs.ChangingItemEventArgs)">
            <summary>
            Called before a player's held item changes.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingGroup(Exiled.Events.EventArgs.ChangingGroupEventArgs)">
            <summary>
            Called before changing a player's group.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingGroupEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingDoor(Exiled.Events.EventArgs.InteractingDoorEventArgs)">
            <summary>
            Called before a player interacts with a door.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingBulletHole"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingElevator(Exiled.Events.EventArgs.InteractingElevatorEventArgs)">
            <summary>
            Called before a player interacts with an elevator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingBulletHole"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingLocker(Exiled.Events.EventArgs.InteractingLockerEventArgs)">
            <summary>
            Called before a player interacts with a locker.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingBulletHole"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnTriggeringTesla(Exiled.Events.EventArgs.TriggeringTeslaEventArgs)">
            <summary>
            Called before a player triggers a tesla.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.TriggeringTeslaEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUnlockingGenerator(Exiled.Events.EventArgs.UnlockingGeneratorEventArgs)">
            <summary>
            Called before a player unlocks a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnOpeningGenerator(Exiled.Events.EventArgs.OpeningGeneratorEventArgs)">
            <summary>
            Called before a player opens a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.OpeningGeneratorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnClosingGenerator(Exiled.Events.EventArgs.ClosingGeneratorEventArgs)">
            <summary>
            Called before a player closes a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ClosingGeneratorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnActivatingGenerator(Exiled.Events.EventArgs.ActivatingGeneratorEventArgs)">
            <summary>
            Called before a player inserts a workstation tablet into a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ActivatingGeneratorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnStoppingGenerator(Exiled.Events.EventArgs.StoppingGeneratorEventArgs)">
            <summary>
            Called before a player ejects the workstation tablet out of a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StoppingGeneratorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnReceivingEffect(Exiled.Events.EventArgs.ReceivingEffectEventArgs)">
            <summary>
            Called before a player receives a status effect.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ReceivingEffectEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingMuteStatus(Exiled.Events.EventArgs.ChangingMuteStatusEventArgs)">
            <summary>
            Called before an user's mute status is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingMuteStatusEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingIntercomMuteStatus(Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs)">
            <summary>
            Called before an user's intercom mute status is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingIntercomMuteStatusEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUsingRadioBattery(Exiled.Events.EventArgs.UsingRadioBatteryEventArgs)">
            <summary>
            Called before a user's radio battery charge is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UsingRadioBatteryEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingRadioPreset(Exiled.Events.EventArgs.ChangingRadioPresetEventArgs)">
            <summary>
            Called before a user's radio preset is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingMicroHIDState(Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs)">
            <summary>
            Called before a player's MicroHID state is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingRadioPresetEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUsingMicroHIDEnergy(Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs)">
            <summary>
            Called before a player's MicroHID energy is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnProcessingHotkey(Exiled.Events.EventArgs.ProcessingHotkeyEventArgs)">
            <summary>
            Called before processing a hotkey.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ProcessingHotkeyEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnWalkingOnSinkhole(Exiled.Events.EventArgs.WalkingOnSinkholeEventArgs)">
            <summary>
            Called before a player walks on a sinkhole.
            </summary>
            /// <param name="ev">The <see cref="T:Exiled.Events.EventArgs.WalkingOnSinkholeEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingShootingTarget(Exiled.Events.EventArgs.InteractingShootingTargetEventArgs)">
            <summary>
            Called before a player interacts with a shooting target.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.InteractingShootingTargetEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDamagingShootingTarget(Exiled.Events.EventArgs.DamagingShootingTargetEventArgs)">
            <summary>
            Called before a player damages a shooting target.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DamagingShootingTargetEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnFlippingCoin(Exiled.Events.EventArgs.FlippingCoinEventArgs)">
            <summary>
            Called before a player flips a coin.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.FlippingCoinEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp049">
            <summary>
            SCP-049 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp049.FinishingRecall">
            <summary>
            Invoked before SCP-049 finishes recalling a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp049.StartingRecall">
            <summary>
            Invoked before SCP-049 begins recalling a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp049.OnFinishingRecall(Exiled.Events.EventArgs.FinishingRecallEventArgs)">
            <summary>
            Called before SCP-049 finishes recalling a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.FinishingRecallEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp049.OnStartingRecall(Exiled.Events.EventArgs.StartingRecallEventArgs)">
            <summary>
            Called before Scp049 starts to recall a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StartingRecallEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp079">
            <summary>
            SCP-079 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.ChangingCamera">
            <summary>
            Invoked before SCP-079 switches cameras.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.GainingExperience">
            <summary>
            Invoked before gaining experience with SCP-079
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.GainingLevel">
            <summary>
            Invoked before gaining levels with SCP-079
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.InteractingTesla">
            <summary>
            Invoked before triggering a tesla with SCP-079.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.TriggeringDoor">
            <summary>
            Invoked before triggering a door with SCP-079.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.ElevatorTeleporting">
            <summary>
            Invoked before SCP-079 teleports using an elevator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.LockingDown">
            <summary>
            Invoked before SCP-079 lockdowns a room.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.StartingSpeaker">
            <summary>
            Invoked before SCP-079 uses a speaker.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.StoppingSpeaker">
            <summary>
            Invoked before SCP-079 finishes using a speaker.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.Recontained">
            <summary>
            Invoked after Scp079 recontainment.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnChangingCamera(Exiled.Events.EventArgs.ChangingCameraEventArgs)">
            <summary>
            Called before SCP-079 switches cameras.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingCameraEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnGainingExperience(Exiled.Events.EventArgs.GainingExperienceEventArgs)">
            <summary>
            Called before gaining experience with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.GainingExperienceEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnGainingLevel(Exiled.Events.EventArgs.GainingLevelEventArgs)">
            <summary>
            Called before gaining levels with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.GainingLevelEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnInteractingTesla(Exiled.Events.EventArgs.InteractingTeslaEventArgs)">
            <summary>
            Called before triggering a tesla with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.InteractingTeslaEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnTriggeringDoor(Exiled.Events.EventArgs.TriggeringDoorEventArgs)">
            <summary>
            Called before interacting with a door with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.TriggeringDoorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnElevatorTeleporting(Exiled.Events.EventArgs.ElevatorTeleportingEventArgs)">
            <summary>
            Called before SCP-079 teleports using an elevator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ElevatorTeleportingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnLockingDown(Exiled.Events.EventArgs.LockingDownEventArgs)">
            <summary>
            Called before SCP-079 lockdowns a room.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.LockingDownEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnStartingSpeaker(Exiled.Events.EventArgs.StartingSpeakerEventArgs)">
            <summary>
            Called before interacting with a speaker with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StartingSpeakerEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnStoppingSpeaker(Exiled.Events.EventArgs.StoppingSpeakerEventArgs)">
            <summary>
            Called before SCP-079 finishes using a speaker.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StoppingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnRecontained(Exiled.Events.EventArgs.RecontainedEventArgs)">
            <summary>
            Called after SCP-079 is recontained.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.RecontainedEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp096">
            <summary>
            SCP-096 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.Enraging">
            <summary>
            Invoked before SCP-096 is enraged.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.CalmingDown">
            <summary>
            Invoked before SCP-096 calms down.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.AddingTarget">
            <summary>
            Invoked before adding a target to SCP-096.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.StartPryingGate">
            <summary>
            Invoked before SCP-096 begins prying open a gate.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.Charging">
            <summary>
            Invoked before SCP-096 begins charging.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.TryingNotToCry">
            <summary>
            Invoked before SCP-096 tries not to cry.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.ChargingPlayer">
            <summary>
            Invoked before SCP-096 charges a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnEnraging(Exiled.Events.EventArgs.EnragingEventArgs)">
            <summary>
            Called before SCP-096 is enraged.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EnragingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnCalmingDown(Exiled.Events.EventArgs.CalmingDownEventArgs)">
            <summary>
            Called before SCP-096 calms down.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.CalmingDownEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnAddingTarget(Exiled.Events.EventArgs.AddingTargetEventArgs)">
            <summary>
            Called before adding a target to SCP-096.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.AddingTargetEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnStartPryingGate(Exiled.Events.EventArgs.StartPryingGateEventArgs)">
            <summary>
            Called before SCP-096 begins prying open a gate.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StartPryingGateEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnCharging(Exiled.Events.EventArgs.ChargingEventArgs)">
            <summary>
            Called before SCP-096 begins charging.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChargingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnTryingNotToCry(Exiled.Events.EventArgs.TryingNotToCryEventArgs)">
            <summary>
            Called before SCP-096 starts trying not to cry.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.TryingNotToCryEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnChargingPlayer(Exiled.Events.EventArgs.ChargingPlayerEventArgs)">
            <summary>
            Called before SCP-096 charges a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChargingPlayerEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp106">
            <summary>
            SCP-106 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp106.CreatingPortal">
            <summary>
            Invoked before SCP-106 creates a portal.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp106.Teleporting">
            <summary>
            Invoked before SCP-106 teleports using a portal.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp106.Containing">
            <summary>
            Invoked before containing SCP-106.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp106.OnCreatingPortal(Exiled.Events.EventArgs.CreatingPortalEventArgs)">
            <summary>
            Called before SCP-106 creates a portal.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.CreatingPortalEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp106.OnTeleporting(Exiled.Events.EventArgs.TeleportingEventArgs)">
            <summary>
            Called before SCP-106 teleports using a portal.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.TeleportingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp106.OnContaining(Exiled.Events.EventArgs.ContainingEventArgs)">
            <summary>
            Called before containing SCP-106.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ContainingEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp173">
            <summary>
            SCP-173 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp173.Blinking">
            <summary>
            Invoked before players near SCP-173 blink.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp173.PlacingTantrum">
            <summary>
            Invoked before a tantrum is placed.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp173.OnBlinking(Exiled.Events.EventArgs.BlinkingEventArgs)">
            <summary>
            Called before players near SCP-173 blink.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.BlinkingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp173.OnPlacingTantrum(Exiled.Events.EventArgs.PlacingTantrumEventArgs)">
            <summary>
            Called before a tantrum is placed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingTantrumEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp914">
            <summary>
            Handles SCP-914 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp914.UpgradingItem">
            <summary>
            Invoked before SCP-914 upgrades a item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp914.UpgradingInventoryItem">
            <summary>
            Invoked before SCP-914 upgrades an item in a player's inventory.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp914.UpgradingPlayer">
            <summary>
            Invoked before SCP-914 upgrades a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp914.Activating">
            <summary>
            Invoked before activating the SCP-914 machine.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp914.ChangingKnobSetting">
            <summary>
            Invoked before changing the SCP-914 machine knob setting.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnUpgradingItem(Exiled.Events.EventArgs.UpgradingItemEventArgs)">
            <summary>
            Called before SCP-914 upgrades a item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UpgradingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnUpgradingInventoryItem(Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs)">
            <summary>
            Called before SCP-914 upgrades an item in a player's inventory.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UpgradingInventoryItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnUpgradingPlayer(Exiled.Events.EventArgs.UpgradingPlayerEventArgs)">
            <summary>
            Called before SCP-914 upgrades a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UpgradingPlayerEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnActivating(Exiled.Events.EventArgs.ActivatingEventArgs)">
            <summary>
            Called before activating the SCP-914 machine.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ActivatingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnChangingKnobSetting(Exiled.Events.EventArgs.ChangingKnobSettingEventArgs)">
            <summary>
            Called before changing the SCP-914 machine knob setting.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Server">
            <summary>
            Server related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.WaitingForPlayers">
            <summary>
            Invoked before waiting for players.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.RoundStarted">
            <summary>
            Invoked after the start of a new round.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.EndingRound">
            <summary>
            Invoked before ending a round.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.RoundEnded">
            <summary>
            Invoked after the end of a round.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.RestartingRound">
            <summary>
            Invoked before the restart of a round.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.ReportingCheater">
            <summary>
            Invoked when a player reports a cheater.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.RespawningTeam">
            <summary>
            Invoked before respawning a wave of Chaos Insurgency or NTF.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.LocalReporting">
            <summary>
            Invoked when sending a complaint about a player to the local server administrators.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.ReloadedConfigs">
            <summary>
            Invoked after the "reload configs" command is ran.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.ReloadedTranslations">
            <summary>
            Invoked after the "reload translations" command is ran.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.ReloadedGameplay">
            <summary>
            Invoked after the "reload gameplay" command is ran.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.ReloadedRA">
            <summary>
            Invoked after the "reload remoteadminconfigs" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnWaitingForPlayers">
            <summary>
            Called before waiting for players.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRoundStarted">
            <summary>
            Called after the start of a new round.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnEndingRound(Exiled.Events.EventArgs.EndingRoundEventArgs)">
            <summary>
            Called before ending a round.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EndingRoundEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRoundEnded(Exiled.Events.EventArgs.RoundEndedEventArgs)">
            <summary>
            Called after the end of a round.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.RoundEndedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRestartingRound">
            <summary>
            Called before restarting a round.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReportingCheater(Exiled.Events.EventArgs.ReportingCheaterEventArgs)">
            <summary>
            Called when a player reports a cheater.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ReportingCheaterEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRespawningTeam(Exiled.Events.EventArgs.RespawningTeamEventArgs)">
            <summary>
            Called before respawning a wave of Chaos Insurgency or NTF.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.RespawningTeamEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnLocalReporting(Exiled.Events.EventArgs.LocalReportingEventArgs)">
            <summary>
            Called when sending a complaint about a player to the local server administrators.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.LocalReportingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedConfigs">
            <summary>
            Called after the "reload configs" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedTranslations">
            <summary>
            Called after the "reload translations" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedGameplay">
            <summary>
            Called after the "reload gameplay" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedRA">
            <summary>
            Called after the "reload remoteadminconfigs" command is ran.
            </summary>
        </member>
        <member name="T:Exiled.Events.Handlers.Warhead">
            <summary>
            Handles warhead related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Warhead.Stopping">
            <summary>
            Invoked before stopping the warhead.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Warhead.Starting">
            <summary>
            Invoked before starting the warhead.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Warhead.Detonated">
            <summary>
            Invoked after the warhead has been detonated.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Warhead.ChangingLeverStatus">
            <summary>
            Invoked before changing the warhead lever status.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnStopping(Exiled.Events.EventArgs.StoppingEventArgs)">
            <summary>
            Called before stopping the warhead.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StoppingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnStarting(Exiled.Events.EventArgs.StartingEventArgs)">
            <summary>
            Called before starting the warhead.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StartingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnDetonated">
            <summary>
            Called after the warhead has been detonated.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnChangingLeverStatus(Exiled.Events.EventArgs.ChangingLeverStatusEventArgs)">
            <summary>
            Called before changing the warhead lever status.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingLeverStatusEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Cassie.SendingCassieMessage">
            <summary>
            Patches <see cref="M:Respawning.RespawnEffectsController.PlayCassieAnnouncement(System.String,System.Boolean,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Cassie.SendingCassieMessage"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.AnnouncingDecontamination">
            <summary>
            Patches <see cref="M:LightContainmentZoneDecontamination.DecontaminationController.UpdateSpeaker(System.Boolean)"/>.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Map.AnnouncingDecontamination"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.AnnouncingNtfEntrance">
            <summary>
            Patch the <see cref="M:Respawning.NamingRules.NineTailedFoxNamingRule.PlayEntranceAnnouncement(System.String)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.AnnouncingNtfEntrance"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.AnnouncingScpTermination">
            <summary>
            Patches <see cref="M:NineTailedFoxAnnouncer.AnnounceScpTermination(Role,PlayerStats.HitInfo,System.String)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.AnnouncingScpTermination"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.DamagingWindow">
            <summary>
            Patches <see cref="M:BreakableWindow.ServerDamageWindow(System.Single)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.DamagingWindow"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.Decontaminating">
            <summary>
            Patches <see cref="M:LightContainmentZoneDecontamination.DecontaminationController.FinishDecontamination"/>.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Map.Decontaminating"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.ExplodingFlashGrenade">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade.PlayExplosionEffects"/>.
            Adds the <see cref="M:Exiled.Events.Handlers.Map.OnExplodingGrenade(Exiled.Events.EventArgs.ExplodingGrenadeEventArgs)"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.ExplodingFragGrenade">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade.Explode"/>.
            Adds the <see cref="M:Exiled.Events.Handlers.Map.OnExplodingGrenade(Exiled.Events.EventArgs.ExplodingGrenadeEventArgs)"/> event.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Events.Map.ExplodingFragGrenade.TrimColliders(Exiled.Events.EventArgs.ExplodingGrenadeEventArgs,UnityEngine.Collider[])">
            <summary>
            Trims colliders from the given array.
            </summary>
            <param name="ev"><inheritdoc cref="T:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs"/></param>
            <param name="colliderArray">The list of colliders to trim from.</param>
            <returns>An array of colliders.</returns>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.GeneratorActivated">
            <summary>
            Patches <see cref="P:MapGeneration.Distributors.Scp079Generator.Engaged"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.GeneratorActivated"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.PlacingBlood">
            <summary>
            Patches <see cref="M:CharacterClassManager.RpcPlaceBlood(UnityEngine.Vector3,System.Int32,System.Single)"/>.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Map.PlacingBlood"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.PlacingBulletHole">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Modules.StandardHitregBase.PlaceBullethole(UnityEngine.Ray,UnityEngine.RaycastHit)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.PlacingBulletHole"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.SpawningItem">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.ItemDistributor.SpawnPickup(InventorySystem.Items.Pickups.ItemPickupBase)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.SpawningItem"/> and <see cref="E:Exiled.Events.Handlers.Map.SpawningItem"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ActivatingWarheadPanel">
            <summary>
            Patch the <see cref="M:PlayerInteract.UserCode_CmdSwitchAWButton"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ActivatingWarheadPanel"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ActivatingWorkstation">
            <summary>
            Patch the <see cref="M:InventorySystem.Items.Firearms.Attachments.WorkstationController.ServerInteract(ReferenceHub,System.Byte)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ActivatingWorkstation"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Banned">
            <summary>
            Patches <see cref="M:BanHandler.IssueBan(BanDetails,BanHandler.BanType)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Banned"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.BanningAndKicking">
            <summary>
            Patches <see cref="M:BanPlayer.BanUser(UnityEngine.GameObject,System.Int64,System.String,System.String,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Banning"/> and <see cref="E:Exiled.Events.Handlers.Player.Kicking"/>events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingGroup">
            <summary>
            Patches <see cref="M:ServerRoles.SetGroup(UserGroup,System.Boolean,System.Boolean,System.Boolean)"/>.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Player.ChangingGroup"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingIntercomMuteStatus">
            <summary>
            Patch the <see cref="P:CharacterClassManager.NetworkIntercomMuted"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ChangingIntercomMuteStatus"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingItem">
            <summary>
            Patches <see cref="P:InventorySystem.Inventory.CurInstance"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ChangingItem"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingMicroHIDState">
            <summary>
            Patches <see cref="M:InventorySystem.Items.MicroHID.MicroHIDItem.ServerSendStatus(InventorySystem.Items.MicroHID.HidStatusMessageType,System.Byte)"/>.
            Adds the <see cref="M:Exiled.Events.Handlers.Player.OnChangingMicroHIDState(Exiled.Events.EventArgs.ChangingMicroHIDStateEventArgs)"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingMuteStatus">
            <summary>
            Patch the <see cref="P:CharacterClassManager.NetworkMuted"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ChangingMuteStatus"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingRadioPreset">
            <summary>
            Patches <see cref="P:Radio.NetworkcurRangeId"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ChangingRadioPreset"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingRole">
            <summary>
            Patches <see cref="M:CharacterClassManager.SetClassIDAdv(RoleType,System.Boolean,CharacterClassManager.SpawnReason,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ChangingRole"/> and <see cref="E:Exiled.Events.Handlers.Player.Escaping"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.DamagingShootingTarget">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Utilities.ShootingTarget.Damage(System.Single,InventorySystem.Items.IDamageDealer,Footprinting.Footprint,UnityEngine.Vector3)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.DamagingShootingTarget"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.DeactivatingWorkstation">
            <summary>
            Patch the <see cref="P:InventorySystem.Items.Firearms.Attachments.WorkstationController.NetworkStatus"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.DeactivatingWorkstation"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Died">
            <summary>
            Patches <see cref="M:PlayerStats.HurtPlayer(PlayerStats.HitInfo,UnityEngine.GameObject,System.Boolean,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Died"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EnteringFemurBreaker">
            <summary>
            Patches <see cref="M:CharacterClassManager.AllowContain"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.EnteringFemurBreaker"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EnteringPocketDimension">
            <summary>
            Patches <see cref="M:Scp106PlayerScript.UserCode_CmdMovePlayer(UnityEngine.GameObject,System.Int32)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.EnteringPocketDimension"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Escaping">
            <summary>
            Patches <see cref="M:CharacterClassManager.UserCode_CmdRegisterEscape"/> for <see cref="E:Exiled.Events.Handlers.Player.Escaping"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EscapingAndFailingEscapePocketDimension">
            <summary>
            Patches <see cref="M:PocketDimensionTeleport.OnTriggerEnter(UnityEngine.Collider)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.EscapingPocketDimension"/> and <see cref="E:Exiled.Events.Handlers.Player.FailingEscapePocketDimension"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.FlippingCoin">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Coin.CoinNetworkHandler.ServerProcessMessage(Mirror.NetworkConnection,InventorySystem.Items.Coin.CoinNetworkHandler.CoinFlipMessage)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.FlippingCoin"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Handcuffing">
            <summary>
            Patches <see cref="M:InventorySystem.Disarming.DisarmedPlayers.SetDisarmedStatus(InventorySystem.Inventory,InventorySystem.Inventory)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Handcuffing"/> and <see cref="E:Exiled.Events.Handlers.Player.RemovingHandcuffs"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Hurting">
            <summary>
            Patches <see cref="M:PlayerStats.HurtPlayer(PlayerStats.HitInfo,UnityEngine.GameObject,System.Boolean,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Hurting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Interacted">
            <summary>
            Patches <see cref="M:PlayerInteract.OnInteract"/>.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Player.Interacted"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingDoor">
            <summary>
            Patches <see cref="M:Interactables.Interobjects.DoorUtils.DoorVariant.ServerInteract(ReferenceHub,System.Byte)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.InteractingDoor"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingElevator">
            <summary>
            Patches <see cref="M:PlayerInteract.UserCode_CmdUseElevator(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.InteractingElevator"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingGeneratorEvents">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.Scp079Generator.ServerInteract(ReferenceHub,System.Byte)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ActivatingGenerator"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingLocker">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.Locker.ServerInteract(ReferenceHub,System.Byte)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.InteractingLocker"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingShootingTarget">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Utilities.ShootingTarget.ServerInteract(ReferenceHub,System.Byte)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.InteractingShootingTarget"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.IntercomSpeaking">
            <summary>
            Patches <see cref="M:Intercom.UserCode_CmdSetTransmit(System.Boolean)"/>.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Player.IntercomSpeaking"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ItemDrop">
            <summary>
            Patches <see cref="M:InventorySystem.Inventory.UserCode_CmdDropItem(System.UInt16,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.DroppingItem"/> and <see cref="E:Exiled.Events.Handlers.Player.DroppingNull"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Joined">
            <summary>
            Patches <see cref="M:ReferenceHub.Awake"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Joined"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Kicked">
            <summary>
            Patches <see cref="M:ServerConsole.Disconnect(UnityEngine.GameObject,System.String)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Kicked"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Left">
            <summary>
            Patches <see cref="M:CustomNetworkManager.OnServerDisconnect(Mirror.NetworkConnection)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Left"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PickingUpAmmo">
            <summary>
            Patches <see cref="M:InventorySystem.Searching.AmmoSearchCompletor.Complete"/> for the <see cref="E:Exiled.Events.Handlers.Player.PickingUpAmmo"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PickingUpArmor">
            <summary>
            Patches the <see cref="M:InventorySystem.Searching.ArmorSearchCompletor.Complete"/> method to add the <see cref="E:Exiled.Events.Handlers.Player.PickingUpArmor"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PickingUpItem">
            <summary>
            Patches <see cref="M:InventorySystem.Searching.ItemSearchCompletor.Complete"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.PickingUpItem"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PreAuthenticating">
            <summary>
            Patches <see cref="M:CustomLiteNetLib4MirrorTransport.ProcessConnectionRequest(LiteNetLib.ConnectionRequest)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.PreAuthenticating"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ProcessingHotkey">
            <summary>
            Patch the <see cref="M:InventorySystem.Inventory.UserCode_CmdProcessHotkey(ActionName,System.UInt16)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ProcessingHotkey"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ReceivingStatusEffect">
            <summary>
            Patches the <see cref="P:CustomPlayerEffects.PlayerEffect.Intensity"/> method.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ReceivingEffect"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ReloadingWeapon">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.BasicMessages.FirearmBasicMessagesHandler.ServerRequestReceived(Mirror.NetworkConnection,InventorySystem.Items.Firearms.BasicMessages.RequestMessage)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ReloadingWeapon"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Shooting">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.BasicMessages.FirearmBasicMessagesHandler.ServerShotReceived(Mirror.NetworkConnection,InventorySystem.Items.Firearms.BasicMessages.ShotMessage)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Shooting"/> and <see cref="E:Exiled.Events.Handlers.Player.Shot"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Shot">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.BasicMessages.FirearmBasicMessagesHandler.ServerShotReceived(Mirror.NetworkConnection,InventorySystem.Items.Firearms.BasicMessages.ShotMessage)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Shooting"/> and <see cref="E:Exiled.Events.Handlers.Player.Shot"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Shot.ShotPellets">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Modules.BuckshotHitreg.ShootPellet(UnityEngine.Vector2,UnityEngine.Ray,UnityEngine.Vector2)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Shooting"/> and <see cref="E:Exiled.Events.Handlers.Player.Shot"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Spawning">
            <summary>
            Patches <see cref="M:CharacterClassManager.ApplyProperties(System.Boolean,System.Boolean)"/>.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Player.Spawning"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.SpawningRagdoll">
            <summary>
            Patches <see cref="M:RagdollManager.SpawnRagdoll(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Int32,PlayerStats.HitInfo,System.Boolean,System.String,System.String,System.Int32,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.SpawningRagdoll"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.SyncingData">
            <summary>
            Patches <see cref="M:AnimationController.UserCode_CmdSyncData(System.Byte,UnityEngine.Vector2)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.SyncingData"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ThrowingItem">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.ThrowableNetworkHandler.ServerProcessMessages(Mirror.NetworkConnection,InventorySystem.Items.ThrowableProjectiles.ThrowableNetworkHandler.ThrowableItemMessage)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ThrowingItem"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.TriggeringTesla">
            <summary>
            Patches <see cref="M:TeslaGateController.FixedUpdate"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.TriggeringTesla"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsedItem">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Usables.Consumable.ServerOnUsingCompleted"/>
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ItemUsed"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsedItem268">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Usables.Scp268.ServerOnUsingCompleted"/>
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ItemUsed"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsingAndCancellingItemUse">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Usables.UsableItemsController.ServerReceivedStatus(Mirror.NetworkConnection,InventorySystem.Items.Usables.StatusMessage)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.UsingItem"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsingMicroHIDEnergy">
            <summary>
            Patches <see cref="M:InventorySystem.Items.MicroHID.MicroHIDItem.ExecuteServerside"/>.
            Adds the <see cref="M:Exiled.Events.Handlers.Player.OnUsingMicroHIDEnergy(Exiled.Events.EventArgs.UsingMicroHIDEnergyEventArgs)"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsingRadioBattery">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Radio.RadioItem.Update"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.UsingRadioBattery"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.WalkingOnSinkhole">
            <summary>
            patches <see cref="M:SinkholeEnvironmentalHazard.DistanceChanged(ReferenceHub)"/> to add the <see cref="E:Exiled.Events.Handlers.Player.WalkingOnSinkhole"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PlacingTantrum">
            <summary>
            Patches <see cref="M:PlayableScps.Scp173.ServerDoTantrum"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp173.PlacingTantrum"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp049.StartingAndFinishingRecall">
            <summary>
            Patches <see cref="M:PlayableScps.Scp049.BodyCmd_ByteAndGameObject(System.Byte,UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp049.StartingRecall"/> and <see cref="E:Exiled.Events.Handlers.Scp049.FinishingRecall"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.ChangingCamera">
            <summary>
            Patches <see cref="M:Scp079PlayerScript.UserCode_CmdSwitchCamera(System.UInt16,System.Boolean)"/>.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Scp079.ChangingCamera"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.GainingExperience">
            <summary>
            Patches <see cref="M:Scp079PlayerScript.UserCode_RpcGainExp(ExpGainType,RoleType)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp079.GainingExperience"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.GainingLevel">
            <summary>
            Patches <see cref="P:Scp079PlayerScript.Lvl"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp079.GainingLevel"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.Interacting">
            <summary>
            Patches <see cref="M:Scp079PlayerScript.UserCode_CmdInteract(Command079,System.String,UnityEngine.GameObject)"/>.
            Adds the <see cref="T:Exiled.Events.EventArgs.InteractingTeslaEventArgs"/>, <see cref="T:Exiled.Events.EventArgs.InteractingDoorEventArgs"/>, <see cref="E:Exiled.Events.Handlers.Scp079.StartingSpeaker"/> and <see cref="E:Exiled.Events.Handlers.Scp079.StoppingSpeaker"/> event for SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.AddingTarget">
            <summary>
            Patches <see cref="M:PlayableScps.Scp096.AddTarget(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.AddingTarget"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.CalmingDown">
            <summary>
            Patches <see cref="M:PlayableScps.Scp096.EndEnrage"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.CalmingDown"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.Charging">
            <summary>
            Patches <see cref="M:PlayableScps.Scp096.Charge"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.Charging"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.ChargingPlayer">
            <summary>
            Patches <see cref="M:PlayableScps.Scp096.ChargePlayer(ReferenceHub)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.ChargingPlayer"/> event.
            </summary>
        </member>
        <member name="F:Exiled.Events.Patches.Events.Scp096.ChargingPlayer.ChargedPlayers">
            <summary>
            The hashset of already charged players.
            Prevents double calling on the same player.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.ChargeEnded">
            <summary>
            Patches <see cref="M:PlayableScps.Scp096.EndCharge"/>.
            Serves to clear the ChargedPlayers.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.Enraging">
            <summary>
            Patches <see cref="M:PlayableScps.Scp096.Enrage"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.Enraging"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.StartPryingGate">
            <summary>
            Patches the <see cref="M:PlayableScps.Scp096.PryGate(Interactables.Interobjects.PryableDoor)"/> method.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.StartPryingGate"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.TryingNotToCry">
            <summary>
            Patches the <see cref="M:PlayableScps.Scp096.TryNotToCry"/> method.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.TryingNotToCry"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp106.Containing">
            <summary>
            Patches <see cref="M:PlayerInteract.UserCode_CmdContain106"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp106.Containing"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp106.CreatingPortal">
            <summary>
            Patches <see cref="M:Scp106PlayerScript.UserCode_CmdMakePortal"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp106.CreatingPortal"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp106.Teleporting">
            <summary>
            Patches <see cref="M:Scp106PlayerScript.UserCode_CmdUsePortal"/>.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Scp106.Teleporting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp173.Blinking">
            <summary>
            Patches <see cref="M:PlayableScps.Scp173.ServerHandleBlinkMessage(UnityEngine.Vector3)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp173.Blinking"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp914.InteractingEvents">
            <summary>
            Patches <see cref="M:Scp914.Scp914Controller.ServerInteract(ReferenceHub,System.Byte)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp914.Activating"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp914.UpgradingItem">
            <summary>
            Patches <see cref="M:Scp914.Scp914Upgrader.ProcessPickup(InventorySystem.Items.Pickups.ItemPickupBase,System.Boolean,UnityEngine.Vector3,Scp914.Scp914KnobSetting)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp914.UpgradingItem"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp914.UpgradingPlayer">
            <summary>
            Patches <see cref="M:Scp914.Scp914Upgrader.ProcessPlayer(ReferenceHub,System.Boolean,System.Boolean,UnityEngine.Vector3,Scp914.Scp914KnobSetting)"/> to add the <see cref="E:Exiled.Events.Handlers.Scp914.UpgradingPlayer"/> event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Exiled.Events.Patches.Events.Server.LocalReporting" -->
        <member name="T:Exiled.Events.Patches.Events.Server.ReportingCheater">
            <summary>
            Patches <see cref="M:CheaterReport.IssueReport(GameConsoleTransmission,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.Byte[]@,System.String,System.Int32,System.String,System.String)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Server.ReportingCheater"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RespawningTeam">
            <summary>
            Patch the <see cref="M:Respawning.RespawnManager.Spawn"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Server.RespawningTeam"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RestartingRound">
            <summary>
            Patches <see cref="M:PlayerStats.Roundrestart"/>.
            Adds the RestartingRound event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RoundEnd">
            <summary>
            Patches <see cref="M:RoundSummary.Start"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Server.EndingRound"/> and <see cref="E:Exiled.Events.Handlers.Server.RoundEnded"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RoundStarted">
            <summary>
            Patches <see cref="M:RoundSummary.SetStartClassList(RoundSummary.SumInfo_ClassList)"/>.
            Adds the RoundStarted event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.WaitingForPlayers">
            <summary>
            Patches a method, the class in which it's defined, is compiler-generated, <see cref="T:CharacterClassManager"/>.
            Adds the WaitingForPlayers event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.ChangingLeverStatus">
            <summary>
            Patches <see cref="M:PlayerInteract.UserCode_CmdUsePanel(PlayerInteract.AlphaPanelOperations)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Warhead.ChangingLeverStatus"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.Detonated">
            <summary>
            Patches <see cref="M:AlphaWarheadController.Detonate"/>.
            Adds the WarheadDetonated event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.Starting">
            <summary>
            Patch the <see cref="M:PlayerInteract.UserCode_CmdDetonateWarhead"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Warhead.Starting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.StartingByServer">
            <summary>
            Patch the <see cref="M:AlphaWarheadController.StartDetonation"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Warhead.Starting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.Stopping">
            <summary>
            Patches <see cref="M:AlphaWarheadController.CancelDetonation(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Warhead.Stopping"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.CassieNotSayingUnitNamesFix">
            <summary>
            Fixes Cassie ignoring unit name if it's changed via <see cref="M:Exiled.API.Features.Map.ChangeUnitColor(System.Int32,System.String)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.DoubleMute">
            <summary>
            Fixes <see cref="P:CharacterClassManager.NetworkMuted"/> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.ExplosiveGrenadeFieldsFix">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade.PlayExplosionEffects"/> to sync <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> property values.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.FlashbangGrenadeFieldsFix">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade.PlayExplosionEffects"/> to sync it's fields with <see cref="T:Exiled.API.Features.Items.FlashGrenade"/> properties.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.GrenadeFuseTimeFix">
            <summary>
            Patches <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> to fix fuse times being unchangeable.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.MuteHandlerClear">
            <summary>
            Fixes <see cref="M:MuteHandler.Reload"/> method.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.OverwatchSkipFix">
            <summary>
            Patches <see cref="M:CharacterClassManager.RunDefaultClassPicker(System.Boolean,System.Int32[]@,System.Collections.Generic.Dictionary{UnityEngine.GameObject,RoleType}@)"/>.
            Fixes overwatch players not spawning correctly.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.RoleChangedIgnoresLite">
            <summary>
            Patches <see cref="M:InventorySystem.InventoryItemProvider.RoleChanged(ReferenceHub,RoleType,RoleType,System.Boolean,CharacterClassManager.SpawnReason)"/> to make it no longer ignore the 'lite' bool.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.InstructionBuilder">
            <summary>
            Handles building new instructions.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Fixes.InstructionBuilder.FixInstructions(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator)">
            <summary>
            Builds new instructions for enrage fix transpilers.
            </summary>
            <param name="instructions"><see cref="T:HarmonyLib.CodeInstruction"/>.</param>
            <param name="generator"><see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>New <see cref="T:HarmonyLib.CodeInstruction"/>.</returns>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.Scp096FailEnrageFix">
            <summary>
            patches <see cref="M:PlayableScps.Scp096.PreWindup(System.Single)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.Scp096WindupFix">
            <summary>
            Patches <see cref="M:PlayableScps.Scp096.Windup(System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.WeaponAttachmentDesyncFix">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Attachments.AttachmentsServerHandler.SetupProvidedWeapon(ReferenceHub,InventorySystem.Items.ItemBase)"/>.
            Fixes if a plugin gives you an weapon that you do not have ammo for, your attachments will not correctly appear on said weapon.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.CommandLogging">
            <summary>
            Patches <see cref="M:RemoteAdmin.CommandProcessor.ProcessQuery(System.String,CommandSender)"/> for command logging.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Generic.CommandLogging.LogCommand(System.String,CommandSender)">
            <summary>
            Logs a command to the RA log file.
            </summary>
            <param name="query">The command being logged.</param>
            <param name="sender">The sender of the command.</param>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.GhostMode">
            <summary>
            Patches <see cref="M:PlayerPositionManager.TransmitData"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.IndividualFriendlyFire">
            <summary>
            Checks friendly fire rules.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Generic.IndividualFriendlyFire.CheckFriendlyFirePlayerFriendly(ReferenceHub,ReferenceHub,RoleType)">
            <summary>
            Checks if there can be damage between two players, according to the FF rules.
            </summary>
            <param name="attackerHub">The person attacking.</param>
            <param name="victimHub">The person being attacked.</param>
            <param name="attackerRole">The attackers current role.</param>
            <returns>True if the attacker can damage the victim.</returns>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.HitboxIdentityCheckFriendlyFire">
            <summary>
            Patches <see cref="M:HitboxIdentity.CheckFriendlyFire(ReferenceHub,ReferenceHub,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.HitboxIdentityDamagePatch">
            <summary>
            Patches <see cref="M:HitboxIdentity.Damage(System.Single,InventorySystem.Items.IDamageDealer,Footprinting.Footprint,UnityEngine.Vector3)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.ExplosionGrenadeExplodeDestructiblePatch">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade.ExplodeDestructible(IDestructible)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.FlashbangGrenadePlayExplosionEffectsPatch">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade.PlayExplosionEffects"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp018ProjectileDetectPlayersPatch">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.Scp018Projectile.DetectPlayers"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.InventoryControlAddPatch">
            <summary>
            Patches <see cref="M:InventorySystem.InventoryExtensions.ServerAddItem(InventorySystem.Inventory,ItemType,System.UInt16,InventorySystem.Items.Pickups.ItemPickupBase)"/> to help manage <see cref="P:Exiled.API.Features.Player.Items"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.InventoryControlRemovePatch">
            <summary>
            Patches <see cref="M:InventorySystem.InventoryExtensions.ServerDropItem(InventorySystem.Inventory,System.UInt16)"/> to help manage <see cref="P:Exiled.API.Features.Player.Items"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.PlayerHasHint">
            <summary>
            Patches <see cref="M:Hints.HintDisplay.Show(Hints.Hint)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp096MaxShield">
            <summary>
            Patches the <see cref="P:PlayableScps.Scp096.MaxShield"/> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp173BeingLooked">
            <summary>
            Patches <see cref="M:PlayableScps.Scp173.UpdateObservers"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.ServerNamePatch">
            <summary>
            Patch the <see cref="M:ServerConsole.ReloadServerName"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.StaminaUsagePatch">
            <summary>
            Patches <see cref="M:Stamina.ProcessStamina"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Utils.NextEnumerator`1">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEnumerator`1"/> that
            allows to get two elements in one move.
            Very useful in patches.
            </summary>
            <typeparam name="T"><inheritdoc cref="T:System.Collections.Generic.IEnumerator`1"/></typeparam>
        </member>
        <member name="M:Exiled.Events.Utils.NextEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Utils.NextEnumerator`1"/> class.
            </summary>
            <param name="enumerator">The innner <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</param>
        </member>
        <member name="P:Exiled.Events.Utils.NextEnumerator`1.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
        </member>
        <member name="P:Exiled.Events.Utils.NextEnumerator`1.NextCurrent">
            <summary>
            Gets the next element in the collection.
            Might be null if there's no element after <see cref="P:Exiled.Events.Utils.NextEnumerator`1.Current"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Utils.NextEnumerator`1.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Utils.NextEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Utils.NextEnumerator`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Utils.NextEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
    </members>
</doc>
