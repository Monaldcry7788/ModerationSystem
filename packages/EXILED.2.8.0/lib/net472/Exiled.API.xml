<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Exiled.API</name>
    </assembly>
    <members>
        <member name="T:Exiled.API.Enums.AmmoType">
            <summary>
            Ammo types present in the game.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato556">
            <summary>
            5.56mm Ammunition.
            Used by <see cref="F:ItemType.GunE11SR"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato762">
            <summary>
            7.62mm Ammunition.
            Used by <see cref="F:ItemType.GunMP7"/> and <see cref="F:ItemType.GunLogicer"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato9">
            <summary>
            9mm Ammunition.
            Used by <see cref="F:ItemType.GunCOM15"/>, <see cref="F:ItemType.GunProject90"/> and <see cref="F:ItemType.GunUSP"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.AuthenticationType">
            <summary>
            Players authentication types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Steam">
            <summary>
            Indicates that the player has been authenticated through Steam.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Discord">
            <summary>
            Indicates that the player has been authenticated through Discord.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Northwood">
            <summary>
            Indicates that the player has been authenticated as a Northwood staffer.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Patreon">
            <summary>
            Indicates that the player has been authenticated as a Patreon.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Unknown">
            <summary>
            Indicates that the player has been authenticated through an unknown provider.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.BarrelType">
            <summary>
            Possible barrel weapon modifications.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BarrelType.None">
            <summary>
            No barrel
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BarrelType.Suppressor">
            <summary>
            Suppressor.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BarrelType.Silencer">
            <summary>
            Silencer.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BarrelType.MuzzleBrake">
            <summary>
            Muzzle Brake.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BarrelType.HeavyBarrel">
            <summary>
            Heavy Barrel.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BarrelType.MuzzleBooster">
            <summary>
            Muzzle Booster.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.CameraType">
            <summary>
            Unique identifier for the different types of SCP-079 cameras.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Unknown">
            <summary>
            Represents an unknown camera.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczClassDSpawn">
            <summary>
            Represents the camera inside the Class-D spawns.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczGlassBox">
            <summary>
            Represents the camera inside SCP-372's containment room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz173Hallway">
            <summary>
            Represents the camera outside of SCP-173's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz173Armory">
            <summary>
            Represents the camera outside the 173_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz173Containment">
            <summary>
            Represents the camera inside of SCP-173's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz173Bottom">
            <summary>
            Represents the camera above the 173_BOTTOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz012">
            <summary>
            Represents the camera outside of SCP-012's room
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz012Bottom">
            <summary>
            Represents the camera at the bottom of SCP-012's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczCafe">
            <summary>
            Represents the LCZ cafe.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczArmory">
            <summary>
            Represents the camera inside the LCZ armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczPlants">
            <summary>
            Represents the plant room in LCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.WC">
            <summary>
            Represents the camera inside the WC hallway.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz914">
            <summary>
            Represents the camera inside SCP-914.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Lcz914Hallway">
            <summary>
            Represents the camera outside SCP-914.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczALight">
            <summary>
            Represents the camera in the LCZ A <see cref="T:Lift"/> in LCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczBLight">
            <summary>
            Represents the camera in the LCZ B <see cref="T:Lift"/> in LCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczAChkp">
            <summary>
            Represents the camera facing the LCZ/HCZ A checkpoint, on the Light Containment side.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczBChkp">
            <summary>
            Represents the camera facing the LCZ/HCZ B checkpoint, on the Light Containment side.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczAChkp">
            <summary>
            Represents the camera facing the LCZ/HCZ A checkpoint, on the Heavy Containment side.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczBChkp">
            <summary>
            Represents the camera facing the LCZ/HCZ B checkpoint, on the Heavy Containment side.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczAHeavy">
            <summary>
            Represents the camera in the LCZ A <see cref="T:Lift"/> in HCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.LczBHeavy">
            <summary>
            Represents the camera in the LCZ B <see cref="T:Lift"/> in heavy.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz079PreHallway">
            <summary>
            Represents the camera in the pre-hallway in front of 079_FIRST door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz079Hallway">
            <summary>
            Represents the camera in the hallway between the 079_FIRST and 079_SECOND doors.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz079Interior">
            <summary>
            Represents the camera inside SCP-079's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz096">
            <summary>
            Represents the camera outside of SCP-096's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz049Elevator">
            <summary>
            Represents the camera in the SCP-049 <see cref="T:Lift"/> hallway that is in front of the elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz049Hall">
            <summary>
            Represents the camera in the SCP-049 <see cref="T:Lift"/> hallway that is not in front of the elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz049Armory">
            <summary>
            Represents the camera that faces toward the 049_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczServerHall">
            <summary>
            Represents the hallway camera in the server room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczServerBottom">
            <summary>
            Represents the camera on the bottom level of the server room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczServerTop">
            <summary>
            Represents the camera on the top level of the server room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczHidHall">
            <summary>
            Represents the camera in the HID hallway.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczHidInterior">
            <summary>
            Represents the camera inside the Micro-HID room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczWarheadHall">
            <summary>
            Represents the camera outside of the alpha warhead <see cref="T:Lift"/> in HCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczWarheadRoom">
            <summary>
            Represents the camera inside of the alpha warhead room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczWarheadSwitch">
            <summary>
            Represents the camera above the alpha warhead switch.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczWarheadArmory">
            <summary>
            Represents the camera inside the alpha warhead armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz939">
            <summary>
            Represents the camera inside SCP-939's containment room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczArmory">
            <summary>
            Represents the camera above the HCZ_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106First">
            <summary>
            Represents the SCP-106 MAIN CAM camera (above the door leading to SCP-106's room).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106Second">
            <summary>
            Represents the SCP-106 SECOND camera (outside the 106_PRIMARY door).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106Primary">
            <summary>
            Represents the 106 ENT A camera (above the 106_PRIMARY door inside the containment room).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106Secondary">
            <summary>
            Represents the 106 ENT B camera (above the 106_SECONDARY door inside the containment room).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106Recontainer">
            <summary>
            Represents the camera above the femur breaker.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Hcz106Stairs">
            <summary>
            Represents the camera facing toward the stairs in SCP-106's containment chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.HczChkpEz">
            <summary>
            Represents the camera facing toward the entrance zone checkpoint (in HCZ).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzChkpHcz">
            <summary>
            Represents the camera facing toward the heavy containment zone checkpoint (in EZ).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzIntercomHall">
            <summary>
            Represents the camera outside the INTERCOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzIntercomStairs">
            <summary>
            Represents the camera inside the INTERCOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzIntercomInterior">
            <summary>
            Represents the camera facing the intercom.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzGateA">
            <summary>
            Represents the camera inside of Gate A (entrance zone).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EzGateB">
            <summary>
            Represents the camera inside of Gate B (entrance zone).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.GateA">
            <summary>
            Represents the camera outside of the Gate A elevator (surface).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Bridge">
            <summary>
            Represents the camera above the Gate A balcony.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Tower">
            <summary>
            Represents the camera on the tower at Gate A.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Backstreet">
            <summary>
            Represents the camera facing the NUKE_SURFACE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.SurfaceGate">
            <summary>
            Represents the camera facing the SURFACE_GATE door (Gate B side)
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Streetcam">
            <summary>
            Represents the camera on the Gate B walkway.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Helipad">
            <summary>
            Represents the HELIPAD camera.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.EscapeZone">
            <summary>
            Represents the ESCAPE ZONE camera (facing toward the ESCAPE door).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Exit">
            <summary>
            Represents the EXIT camera (above the Class-D and Scientist extraction point).
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.DoorType">
            <summary>
            Unique identifier for the different types of doors.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.UnknownDoor">
            <summary>
            Represents an unknown door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp012">
            <summary>
            Represents the 012 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp012Bottom">
            <summary>
            Represents the 012_BOTTOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp012Locker">
            <summary>
            Represents the 012_LOCKER door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp049Armory">
            <summary>
            Represents the 049_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp079First">
            <summary>
            Represents the 079_FIRST door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp079Second">
            <summary>
            Represents the 079_SECOND door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp096">
            <summary>
            Represents the 096 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp106Bottom">
            <summary>
            Represents the 106_BOTTOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp106Primary">
            <summary>
            Represents the 106_PRIMARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp106Secondary">
            <summary>
            Represents the 106_SECONDARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Gate">
            <summary>
            Represents the 173 gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Connector">
            <summary>
            Represents the door between the 173 gate and the 173 armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Armory">
            <summary>
            Represents the 173_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Bottom">
            <summary>
            Represents the 173_BOTTOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GR18">
            <summary>
            Represents the GR18 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp914">
            <summary>
            Represents the 914 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointEntrance">
            <summary>
            Represents the CHECKPOINT_ENT door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointLczA">
            <summary>
            Represents the CHECKPOINT_LCZ_A door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointLczB">
            <summary>
            Represents the CHECKPOINT_LCZ_B door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.EntranceDoor">
            <summary>
            RRepresents any entrance zone styled door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.EscapePrimary">
            <summary>
            Represents the ESCAPE_PRIMARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.EscapeSecondary">
            <summary>
            Represents the ESCAPE_SECONDARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.ServersBottom">
            <summary>
            Represents the SERVERS_BOTTOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GateA">
            <summary>
            Represents the GATE_A door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GateB">
            <summary>
            Represents the GATE_B door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HczArmory">
            <summary>
            Represents the HCZ_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HeavyContainmentDoor">
            <summary>
            Represents any heavy containment styled door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HID">
            <summary>
            Represents the HID door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HIDLeft">
            <summary>
            Represents the HID_LEFT door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HIDRight">
            <summary>
            Represents the HID_RIGHT door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Intercom">
            <summary>
            Represents the INTERCOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LczArmory">
            <summary>
            Represents the LCZ_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LczCafe">
            <summary>
            Represents the LCZ_CAFE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LczWc">
            <summary>
            Represents the LCZ_WC door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LightContainmentDoor">
            <summary>
            Represents any light containment styled door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.NukeArmory">
            <summary>
            Represents the NUKE_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.NukeSurface">
            <summary>
            Represents the NUKE_SURFACE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.PrisonDoor">
            <summary>
            Represents any of the Class-D cell doors.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.SurfaceGate">
            <summary>
            Represents the SURFACE_GATE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp372">
            <summary>
            Represents the 372 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Airlocks">
            <summary>
            Represents the Airlocks door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.ContDoor">
            <summary>
            Represents the ContDoor door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Escape">
            <summary>
            Represents the ESCAPE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.EscapeInner">
            <summary>
            Represents the ESCAPE_INNER door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173">
            <summary>
            Represents the 173 door.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.EffectType">
            <summary>
            Status effects as enum.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Amnesia">
            <summary>
            The player isn't able to open their inventory or reload a weapon.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Asphyxiated">
            <summary>
            Drains the player's stamina and then health.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Bleeding">
            <summary>
            Damages the player over time.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Blinded">
            <summary>
            Blurs the player's screen.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Burned">
            <summary>
            Increases damage the player gets.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Concussed">
            <summary>
            Blurs the player's screen when rotating.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Corroding">
            <summary>
            Teleports the player to the pocket dimension and drains health.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Deafened">
            <summary>
            Deafens the player.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Decontaminating">
            <summary>
            Removes 10% of the player's health per second.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Disabled">
            <summary>
            Slows down the player's movement.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Ensnared">
            <summary>
            Stops the player's movement.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Exhausted">
            <summary>
            Halves the player's maximum stamina and stamina regeneration rate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Flashed">
            <summary>
            Flashes the player.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Hemorrhage">
            <summary>
            Drains the player's health while sprinting.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Invigorated">
            <summary>
            Reduces the player's FOV, gives infinite stamina and gives the effect of underwater sound.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Panic">
            <summary>
            Increases the player's stamina consumption.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Poisoned">
            <summary>
            Damages the player every 5 seconds, starting low and ramping hight.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Scp207">
            <summary>
            Makes the player faster but also drains health.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Scp268">
            <summary>
            Makes the player invisibility.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.SinkHole">
            <summary>
            Slows down the player's movement with SCP-106 effect.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Visuals939">
            <summary>
            Gives the player the sound vision of SCP-939.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ElevatorType">
            <summary>
            The unique type of elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Unknown">
            <summary>
            Unknown elevator Type.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.GateA">
            <summary>
            Entrance Gate A elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.GateB">
            <summary>
            Entrance Gate B elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Nuke">
            <summary>
            Heavy Containment Zone Nuke elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Scp049">
            <summary>
            Heavy Containment Zone SCP-049 elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.LczA">
            <summary>
            Light Containment Zone checkpoint A elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.LczB">
            <summary>
            Light Containment Zone checkpoint B elevator.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.EnvironmentType">
            <summary>
            A set of environment types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Development">
            <summary>
            The development environment, for developers.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Testing">
            <summary>
            The testing environment, for testing things.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Production">
            <summary>
            The production environment, for the public.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Ptb">
            <summary>
            The ptb environment, for Public Test Builds.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.GrenadeType">
            <summary>
            The unique type of grenade.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GrenadeType.FragGrenade">
            <summary>
            Frag grenade.
            Used by <see cref="F:ItemType.GrenadeFrag"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GrenadeType.Flashbang">
            <summary>
            Flashbang.
            Used by <see cref="F:ItemType.GrenadeFlash"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GrenadeType.Scp018">
            <summary>
            Scp018 ball.
            Used by <see cref="F:ItemType.SCP018"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.LeadingTeam">
            <summary>
            The team that is currently leading the round.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.FacilityForces">
            <summary>
            Represents Scientists, Guards, and NTF.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.ChaosInsurgency">
            <summary>
            Represents Class-D and Chaos Insurgency.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.Anomalies">
            <summary>
            Represents SCPs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.Draw">
            <summary>
            Represents a draw.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.OtherType">
            <summary>
            Possible other weapon modifications.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.OtherType.None">
            <summary>
            No other
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.OtherType.Flashlight">
            <summary>
            Flashlight.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.OtherType.GyroscopicStabilizer">
            <summary>
            Gyroscopic Stabilizer.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.OtherType.AmmoCounter">
            <summary>
            Ammo Counter.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.OtherType.Laser">
            <summary>
            Laser.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.PluginPriority">
            <summary>
            Provides simple and readable plugin priority values.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Default">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.Medium"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Last">
            <summary>
            Execute the plugin last, after other ones.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Lowest">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.Last"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Lower">
            <summary>
            Default plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Low">
            <summary>
            Low plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Medium">
            <summary>
            Medium plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.High">
            <summary>
            Higher plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Higher">
            <summary>
            Higher plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Highest">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.First"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.First">
            <summary>
            Execute the plugin first, before other ones.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.RespawnEffectType">
            <summary>
            Layers game respawn effects.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.PlayChaosInsurgencyMusic">
            <summary>
            Plays the <see cref="F:RoleType.ChaosInsurgency"/> music to alive <see cref="F:RoleType.ClassD"/> and <see cref="F:RoleType.ChaosInsurgency"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.SummonChaosInsurgencyVan">
            <summary>
            Summons the <see cref="F:RoleType.ChaosInsurgency"/> van.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.SummonNtfChopper">
            <summary>
            Summons the NTF chopper.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.RoomType">
            <summary>
            Unique identifier for the different types of rooms.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Unknown">
            <summary>
            Unknown Room Type.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczArmory">
            <summary>
            Lower Containment Armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCurve">
            <summary>
            Lower Containment L-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczStraight">
            <summary>
            Lower Containment |-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz012">
            <summary>
            Lower Containment SCP 012 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz914">
            <summary>
            Lower Containment SCP 914 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCrossing">
            <summary>
            Lower Containment X-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczTCross">
            <summary>
            Lower Containment T-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCafe">
            <summary>
            Lower Containment Cafe Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczPlants">
            <summary>
            Lower Containment T-Shaped Plants Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczToilets">
            <summary>
            Lower Containment Toilets Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczAirlock">
            <summary>
            Lower Containment Airlock Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz173">
            <summary>
            Lower Containment SCP 173 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczClassDSpawn">
            <summary>
            Lower Containment Class D Spawn Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczChkpB">
            <summary>
            Lower Containment Checkpoint B Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczGlassBox">
            <summary>
            Lower Containment Glass Box Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczChkpA">
            <summary>
            Lower Containment Checkpoint A Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz079">
            <summary>
            Heavy Containment SCP 079 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczEzCheckpoint">
            <summary>
            Heavy Containment Entrance Checkpoint Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczArmory">
            <summary>
            Heavy Containment T-Shaped Armory Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz939">
            <summary>
            Heavy Containment SCP 939 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczHid">
            <summary>
            Heavy Containment HID-Spawn Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz049">
            <summary>
            Heavy Containment SCP 049 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczChkpA">
            <summary>
            Heavy Containment Checkpoint A Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczCrossing">
            <summary>
            Heavy Containment X-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz106">
            <summary>
            Heavy Containment SCP 106 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczNuke">
            <summary>
            Heavy Containment Nuke Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczTesla">
            <summary>
            Heavy Containment Tesla Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczServers">
            <summary>
            Heavy Containment Servers Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczChkpB">
            <summary>
            Heavy Containment Checkpoint B Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczTCross">
            <summary>
            Heavy Containment T-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczCurve">
            <summary>
            Heavy Containment L-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz096">
            <summary>
            Heavy Containment SCP 096 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzVent">
            <summary>
            Entrance Red Vent Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzIntercom">
            <summary>
            Entrance Intercom Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzGateA">
            <summary>
            Entrance Gate A Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzDownstairsPcs">
            <summary>
            Entrance PC Room With Downstairs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCurve">
            <summary>
            Entrance L-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzPcs">
            <summary>
            Entrance PC Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCrossing">
            <summary>
            Entrance X-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCollapsedTunnel">
            <summary>
            Entrance Red Collapsed Tunnel Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzConference">
            <summary>
            Entrance |-Shaped Dr.L Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzStraight">
            <summary>
            Entrance |-Shaped Room
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCafeteria">
            <summary>
            Entrance Cafeteria Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzUpstairsPcs">
            <summary>
            Entrance PC Room With Upstairs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzGateB">
            <summary>
            Entrance Gate B Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzShelter">
            <summary>
            Entrance Shelter Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Pocket">
            <summary>
            Pocket Dimension.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Surface">
            <summary>
            The Surface.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.Side">
            <summary>
            In which side a certain <see cref="T:RoleType"/> belongs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Scp">
            <summary>
            The same as <see cref="F:Team.SCP"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Mtf">
            <summary>
            Mobile Task Forces team.
            Contains <see cref="F:RoleType.Scientist"/>, <see cref="F:RoleType.FacilityGuard"/>, <see cref="F:RoleType.NtfCadet"/>, <see cref="F:RoleType.NtfLieutenant"/>,
            <see cref="F:RoleType.NtfCommander"/> and <see cref="F:RoleType.NtfScientist"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.ChaosInsurgency">
            <summary>
            Chaos Insurgency team.
            Contains <see cref="F:RoleType.ClassD"/> and <see cref="F:RoleType.ChaosInsurgency"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Tutorial">
            <summary>
            <see cref="F:Team.TUT"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.None">
            <summary>
            <see cref="F:Team.RIP"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.SightType">
            <summary>
            Possible sight weapon modifications.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SightType.None">
            <summary>
            No sight
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SightType.Collimator">
            <summary>
            Collimator
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SightType.HoloSight">
            <summary>
            Holo Sight
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SightType.BlueDotSight">
            <summary>
            Blue Dot Sight
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SightType.RedDot">
            <summary>
            Red Dot
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SightType.NightVisionSight">
            <summary>
            Night Vision Sight
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SightType.SniperScope">
            <summary>
            Sniper Scope
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ZoneType">
            <summary>
            Facility zone types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Surface">
            <summary>
            The Surface Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Entrance">
            <summary>
            The Entrance Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.HeavyContainment">
            <summary>
            The Heavy Containment Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.LightContainment">
            <summary>
            The Light Containment Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Unspecified">
            <summary>
            An unknown zone.
            </summary>
        </member>
        <member name="T:Exiled.API.Extensions.CameraExtensions">
            <summary>
            Contains an extension method to get <see cref="T:Exiled.API.Enums.CameraType"/> from <see cref="T:Camera079"/>, as well as additional methods to get the <see cref="M:Exiled.API.Extensions.CameraExtensions.Room(Camera079)"/> and <see cref="T:Exiled.API.Enums.ZoneType"/> of a camera.
            Internal class <see cref="M:Exiled.API.Extensions.CameraExtensions.RegisterCameraInfoOnLevelLoad"/> to cache the <see cref="T:Exiled.API.Enums.CameraType"/> and <see cref="M:Exiled.API.Extensions.CameraExtensions.Room(Camera079)"/> on level load.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.CameraExtensions.Room(Camera079)">
            <summary>
            Returns the <see cref="M:Exiled.API.Extensions.CameraExtensions.Room(Camera079)"/> the camera is in, or null if not found.
            </summary>
            <param name="camera">The <see cref="T:Camera079"/> to check.</param>
            <returns>A <see cref="M:Exiled.API.Extensions.CameraExtensions.Room(Camera079)"/>, or null if not found.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.CameraExtensions.Type(Camera079)">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.CameraType"/>.
            </summary>
            <param name="camera">The <see cref="T:Camera079"/> to check.</param>
            <returns>The <see cref="T:Exiled.API.Enums.CameraType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.CameraExtensions.Zone(Camera079)">
            <summary>
            Returns the <see cref="T:Exiled.API.Enums.ZoneType"/> the camera is in.
            </summary>
            <param name="camera">The <see cref="T:Camera079"/> to check.</param>
            <returns>The <see cref="T:Exiled.API.Enums.ZoneType"/> of the zone the camera is in.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.CameraExtensions.RegisterCameraInfoOnLevelLoad">
            <summary>
            Gets all the <see cref="T:Exiled.API.Enums.CameraType"/> and <see cref="M:Exiled.API.Extensions.CameraExtensions.Room(Camera079)"/> values for for the <see cref="T:Camera079"/> instances using <see cref="F:Camera079.cameraId"/> and <see cref="T:UnityEngine.GameObject"/> name.
            </summary>
        </member>
        <member name="T:Exiled.API.Extensions.DoorExtensions">
            <summary>
            Contains extensions related to <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.DoorExtensions.Type(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.DoorType"/>.
            </summary>
            <param name="door">The Door to check.</param>
            <returns>The <see cref="T:Exiled.API.Enums.DoorType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DoorExtensions.BreakDoor(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Breaks the specified door, if it is not already broken.
            </summary>
            <param name="door">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> to break.</param>
            <returns>True if the door was broken, false if it was unable to be broken, or was already broken before.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DoorExtensions.IsBreakable(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Indicates when the door can be broken.
            </summary>
            <param name="door">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.</param>
            <returns>true if the door can be broken; otherwise, false.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DoorExtensions.GetNametag(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Gets a nametag of a door.
            </summary>
            <param name="door">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.</param>
            <returns>A nametag of the door or null.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DoorExtensions.RegisterDoorTypesOnLevelLoad">
            <summary>
            Gets all the <see cref="T:Exiled.API.Enums.DoorType"/> values for the <see cref="T:Door"/> instances using <see cref="F:Door.DoorName"/> and <see cref="T:UnityEngine.GameObject"/> name.
            </summary>
        </member>
        <member name="T:Exiled.API.Extensions.EffectTypeExtension">
            <summary>
            Contains an extension method to get <see cref="T:System.Type"/> from <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.Type(Exiled.API.Enums.EffectType)">
            <summary>
            Gets an instance of <see cref="T:System.Type"/> points to an effect.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/> enum.</param>
            <returns>The <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.Item">
            <summary>
            A set of extensions for <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.Item.Spawn(ItemType,System.Single,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Int32,System.Int32)">
            <summary>
            Spawns a <see cref="T:Pickup"/> in a desired <see cref="T:UnityEngine.Vector3"/> position.
            </summary>
            <param name="itemType">The type of the item to be spawned.</param>
            <param name="durability">The durability (or ammo, depends on the weapon) of the item.</param>
            <param name="position">Where the item will be spawned.</param>
            <param name="rotation">The rotation. We recommend you to use <see cref="M:UnityEngine.Quaternion.Euler(System.Single,System.Single,System.Single)"/>.</param>
            <param name="sight">The sight the weapon will have (0 is nothing, 1 is the first sight available in the weapon manager, and so on).</param>
            <param name="barrel">The barrel of the weapon (0 is no custom barrel, 1 is the first barrel available, and so on).</param>
            <param name="other">Other attachments like flashlight, laser or ammo counter.</param>
            <returns>Returns the spawned <see cref="T:Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.Spawn(Inventory.SyncItemInfo,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Spawns an <see cref="T:Pickup"/> in a desired <see cref="T:UnityEngine.Vector3"/> position.
            </summary>
            <param name="item">The item to be spawned.</param>
            <param name="position">Where the item will be spawned.</param>
            <param name="rotation">The rotation. We recommend you to use <see cref="M:UnityEngine.Quaternion.Euler(System.Single,System.Single,System.Single)"/>.</param>
            <returns>Returns the spawned <see cref="T:Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.SetWeaponAmmo(Inventory.SyncListItemInfo,Inventory.SyncItemInfo,System.Int32)">
            <summary>
            Set the ammo of an <see cref="T:Inventory.SyncItemInfo">item</see>.
            </summary>
            <param name="list">The list of items.</param>
            <param name="weapon">The weapon to be changed.</param>
            <param name="amount">The ammo amount.</param>
        </member>
        <member name="M:Exiled.API.Extensions.Item.SetWeaponAmmo(Exiled.API.Features.Player,Inventory.SyncItemInfo,System.Int32)">
            <summary>
            Set the ammo value of an <see cref="T:Inventory.SyncItemInfo"/>.
            </summary>
            <param name="player">The player instance.</param>
            <param name="weapon">The weapon to be changed.</param>
            <param name="amount">The ammo amount.</param>
        </member>
        <member name="M:Exiled.API.Extensions.Item.GetWeaponAmmo(Inventory.SyncItemInfo)">
            <summary>
            Get the ammo of an <see cref="T:Inventory.SyncItemInfo"/>.
            </summary>
            <param name="weapon">The weapon to be get.</param>
            <returns>Returns the weapon left ammo.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsAmmo(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is an ammo.
            </summary>
            <param name="item">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an ammo or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsWeapon(ItemType,System.Boolean)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a weapon.
            </summary>
            <param name="type">The item to be checked.</param>
            <param name="checkMicro">Indicates whether the MicroHID item should be taken into account or not.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a weapon or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsSCP330(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is an SCP-330.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an SCP or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsSCP(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is an SCP.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an SCP or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsScp(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is an SCP.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an SCP or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsThrowable(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a throwable item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a throwable item or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsMedical(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a medical item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a medical item or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsUtility(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a utility item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an utilty item or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsKeycard(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a keycard.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a keycard or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.GetSight(Exiled.API.Features.Player,Inventory.SyncItemInfo)">
            <summary>
            Gets sight modification of the weapon.
            </summary>
            <param name="player">The player instance.</param>
            <param name="weapon">The weapon with attachment.</param>
            <returns>Returns <see cref="T:Exiled.API.Enums.SightType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.SetSight(Exiled.API.Features.Player,Inventory.SyncItemInfo,Exiled.API.Enums.SightType)">
            <summary>
            Sets sight modification of the weapon.
            </summary>
            <param name="player">The player instance.</param>
            <param name="weapon">The weapon with attachment.</param>
            <param name="type">Type of the sight.</param>
        </member>
        <member name="M:Exiled.API.Extensions.Item.GetBarrel(Exiled.API.Features.Player,Inventory.SyncItemInfo)">
            <summary>
            Gets barrel modification of the weapon.
            </summary>
            <param name="player">The player instance.</param>
            <param name="weapon">The weapon with attachment.</param>
            <returns>Returns <see cref="T:Exiled.API.Enums.BarrelType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.SetBarrel(Exiled.API.Features.Player,Inventory.SyncItemInfo,Exiled.API.Enums.BarrelType)">
            <summary>
            Sets barrel modification of the weapon.
            </summary>
            <param name="player">The player instance.</param>
            <param name="weapon">The weapon with attachment.</param>
            <param name="type">Type of the barrel.</param>
        </member>
        <member name="M:Exiled.API.Extensions.Item.GetOther(Exiled.API.Features.Player,Inventory.SyncItemInfo)">
            <summary>
            Gets other modification of the weapon.
            </summary>
            <param name="player">The player instance.</param>
            <param name="weapon">The weapon with attachment.</param>
            <returns>Returns <see cref="T:Exiled.API.Enums.OtherType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.SetOther(Exiled.API.Features.Player,Inventory.SyncItemInfo,Exiled.API.Enums.OtherType)">
            <summary>
            Sets other modification of the weapon.
            </summary>
            <param name="player">The player instance.</param>
            <param name="weapon">The weapon with attachment.</param>
            <param name="type">Type of the other.</param>
        </member>
        <member name="M:Exiled.API.Extensions.Item.GetDefaultDurability(ItemType)">
            <summary>
            Gets the default durability of any item.
            </summary>
            <param name="item">The <see cref="T:ItemType">item</see> that you want to get durability of.</param>
            <returns>Returns the item durability.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.LiftTypeExtension">
            <summary>
            Contains an extension method to get <see cref="T:Exiled.API.Enums.ElevatorType"/> from <see cref="T:Lift"/>.
            Internal class <see cref="M:Exiled.API.Extensions.LiftTypeExtension.RegisterElevatorTypesOnLevelLoad"/> to cache the <see cref="T:Exiled.API.Enums.ElevatorType"/> on level load.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.LiftTypeExtension.Type(Lift)">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.ElevatorType"/>.
            </summary>
            <param name="lift">The <see cref="T:Lift"/> to check.</param>
            <returns>The <see cref="T:Exiled.API.Enums.ElevatorType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.LiftTypeExtension.RegisterElevatorTypesOnLevelLoad">
            <summary>
            Gets all the <see cref="T:Exiled.API.Enums.ElevatorType"/> values for the <see cref="T:Lift"/> instances using <see cref="F:Lift.elevatorName"/> and <see cref="T:UnityEngine.GameObject"/> name.
            </summary>
        </member>
        <member name="T:Exiled.API.Extensions.MirrorExtensions">
            <summary>
            A set of extensions for <see cref="N:Mirror"/> Networking.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.WriterExtensions">
            <summary>
            Gets <see cref="T:System.Reflection.MethodInfo"/> corresponding to <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.SyncVarDirtyBits">
            <summary>
            Gets a all DirtyBit <see cref="T:System.UInt64"/> from <see cref="T:Exiled.API.Extensions.String"/>(format:classname.methodname).
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.SetDirtyBitsMethodInfo">
            <summary>
            Gets a <see cref="M:Mirror.NetworkBehaviour.SetDirtyBit(System.UInt64)"/>'s <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.SendSpawnMessageMethodInfo">
            <summary>
            Gets a NetworkServer.SendSpawnMessage's <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.Shake(Exiled.API.Features.Player)">
            <summary>
            Shaking target <see cref="T:Exiled.API.Features.Player"/> window.
            </summary>
            <param name="player">Target to shake.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.PlayBeepSound(Exiled.API.Features.Player)">
            <summary>
            Play beep sound to <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">Target to play.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SetPlayerInfoForTargetOnly(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String)">
            <summary>
            Set <see cref="P:NicknameSync.Network_customPlayerInfoString"/> that only <see cref="T:Exiled.API.Features.Player"/> can see.
            </summary>
            <param name="player">Only this player can see info.</param>
            <param name="target">Target to set info.</param>
            <param name="info">Setting info.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.ChangeAppearance(Exiled.API.Features.Player,RoleType)">
            <summary>
            Change <see cref="T:Exiled.API.Features.Player"/> character model for appearance.
            It will continue until <see cref="T:Exiled.API.Features.Player"/>'s <see cref="T:RoleType"/> changes.
            </summary>
            <param name="player">Player to change.</param>
            <param name="type">Model type.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.PlayCassieAnnouncement(Exiled.API.Features.Player,System.String,System.Boolean,System.Boolean)">
            <summary>
            Send CASSIE announcement that only <see cref="T:Exiled.API.Features.Player"/> can hear.
            It will continue until <see cref="T:Exiled.API.Features.Player"/>'s <see cref="T:RoleType"/> changes.
            </summary>
            <param name="player">Target to send.</param>
            <param name="words">Announcement words.</param>
            <param name="makeHold">Same on <see cref="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean)"/>'s isHeld.</param>
            <param name="makeNoise">Same on <see cref="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean)"/>'s isNoisy.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SendFakeSyncVar(Exiled.API.Features.Player,Mirror.NetworkIdentity,System.Type,System.String,System.Object)">
            <summary>
            Send fake values to client's <see cref="T:Mirror.SyncVarAttribute"/>.
            </summary>
            <param name="target">Target to send.</param>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="propertyName">Property name starting with Network.</param>
            <param name="value">Value of send to target.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.ResyncSyncVar(Mirror.NetworkIdentity,System.Type,System.String)">
            <summary>
            Force resync to client's <see cref="T:Mirror.SyncVarAttribute"/>.
            </summary>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="propertyName">Property name starting with Network.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SendFakeTargetRpc(Exiled.API.Features.Player,Mirror.NetworkIdentity,System.Type,System.String,System.Object[])">
            <summary>
            Send fake values to client's <see cref="T:Mirror.ClientRpcAttribute"/>.
            </summary>
            <param name="target">Target to send.</param>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="rpcName">Property name starting with Rpc.</param>
            <param name="values">Values of send to target.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SendFakeSyncObject(Exiled.API.Features.Player,Mirror.NetworkIdentity,System.Type,System.Action{Mirror.NetworkWriter})">
            <summary>
            Send fake values to client's <see cref="T:Mirror.SyncObject"/>.
            </summary>
            <param name="target">Target to send.</param>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="customAction">Custom writing action.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.EditNetworkObject(Mirror.NetworkIdentity,System.Action{Mirror.NetworkIdentity})">
            <summary>
            Edit <see cref="T:Mirror.NetworkIdentity"/>'s parameter and sync.
            </summary>
            <param name="identity">Target object.</param>
            <param name="customAction">Edit function.</param>
        </member>
        <member name="T:Exiled.API.Extensions.RagdollExtensions">
            <summary>
            A set of extensions for <see cref="T:Ragdoll"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.RagdollExtensions.GetRoom(Ragdoll)">
            <summary>
            Finds and returns the <see cref="T:Exiled.API.Features.Room"/> the ragdoll is located in.
            </summary>
            <param name="ragdoll">The <see cref="T:Ragdoll"/> to check the room of.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> the ragdoll is located in.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RagdollExtensions.GetRole(Ragdoll)">
            <summary>
            Returns the <see cref="T:RoleType"/> of the ragdoll.
            </summary>
            <param name="ragdoll">The <see cref="T:Ragdoll"/> to check the role of.</param>
            <returns>The <see cref="T:RoleType"/> of the ragdoll.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RagdollExtensions.GetOwner(Ragdoll)">
            <summary>
            Returns the owner <see cref="T:Exiled.API.Features.Player"/>, or null if the ragdoll does not have an owner.
            </summary>
            <param name="ragdoll">The <see cref="T:Ragdoll"/> to get the owner of.</param>
            <returns>The owner of the ragdoll, or null if the ragdoll does not have an owner.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RagdollExtensions.GetKiller(Ragdoll)">
            <summary>
            Returns the killing <see cref="T:Exiled.API.Features.Player"/>, or null if the killer is not a player.
            </summary>
            <param name="ragdoll">The <see cref="T:Ragdoll"/> to get the killer of.</param>
            <returns>The killing <see cref="T:Exiled.API.Features.Player"/>, or null if the killer is not a player.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.Reflection">
            <summary>
            A set of extensions for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.Reflection.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invoke a static method.
            </summary>
            <param name="type">The method type.</param>
            <param name="methodName">The method name.</param>
            <param name="param">The method parameters.</param>
        </member>
        <member name="M:Exiled.API.Extensions.Reflection.CopyProperties(System.Object,System.Object)">
            <summary>
            Copy all properties from the source class to the target one.
            </summary>
            <param name="target">The target object.</param>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="T:Exiled.API.Extensions.Role">
            <summary>
            A set of extensions for <see cref="T:RoleType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.Role.GetColor(RoleType)">
            <summary>
            Get a <see cref="T:RoleType">role's</see> <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="role">The <see cref="T:RoleType"/> to get the color of.</param>
            <returns>The <see cref="T:UnityEngine.Color"/> of the role.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Role.GetSide(RoleType)">
            <summary>
            Get a <see cref="T:RoleType">role's</see> <see cref="T:Exiled.API.Enums.Side"/>.
            </summary>
            <param name="role">The <see cref="T:RoleType"/> to check the side of.</param>
            <returns><see cref="T:Exiled.API.Enums.Side"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Role.GetSide(Team)">
            <summary>
            Get a <see cref="T:Team">team's</see> <see cref="T:Exiled.API.Enums.Side"/>.
            </summary>
            <param name="team">The <see cref="T:Team"/> to get the <see cref="T:Exiled.API.Enums.Side"/> of.</param>
            <returns><see cref="T:Exiled.API.Enums.Side"/>.</returns>.
        </member>
        <member name="M:Exiled.API.Extensions.Role.GetTeam(RoleType)">
            <summary>
            Get the <see cref="T:Team"/> of the given <see cref="T:RoleType"/>.
            </summary>
            <param name="roleType">Role.</param>
            <returns><see cref="T:Team"/>.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.String">
            <summary>
            A set of extensions for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.String.GetDistance(System.String,System.String)">
            <summary>
            Compute the distance between two <see cref="T:System.String"/>.
            </summary>
            <param name="firstString">The first string to be compared.</param>
            <param name="secondString">The second string to be compared.</param>
            <returns>Returns the distance between the two strings.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.ExtractCommand(System.String)">
            <summary>
            Extract command name and arguments from a <see cref="T:System.String"/>.
            </summary>
            <param name="commandLine">The <see cref="T:System.String"/> to extract from.</param>
            <returns>Returns a <see cref="T:System.ValueTuple"/> containing the exctracted command name and arguments.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.ToSnakeCase(System.String,System.Boolean)">
            <summary>
            Converts a <see cref="T:System.String"/> to snake_case convention.
            </summary>
            <param name="str">The string to be converted.</param>
            <param name="shouldReplaceSpecialChars">Indicates whether special chars has to be replaced or not.</param>
            <returns>Returns the new snake_case string.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a string.
            </summary>
            <typeparam name="T">The type of the IEnumerable.</typeparam>
            <param name="enumerable">The instance.</param>
            <param name="showIndex">Indicates whether the enumerator index should be shown or not.</param>
            <returns>Returns the converted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.RemoveBracketsOnEndOfName(System.String)">
            <summary>
            Removes the prefab-generated brackets (#) on <see cref="T:UnityEngine.GameObject"/> names.
            </summary>
            <param name="name">Name of the <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>Name without brackets.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.GetBefore(System.String,System.Char)">
            <summary>
            Retrieves a string before a symbol from an input.
            </summary>
            <param name="input">The input.</param>
            <param name="symbol">The symbol.</param>
            <returns>Substring before the symbol.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.SplitCamelCase(System.String)">
            <summary>
            Splits camel case string to space-separated words. Ex: SomeCamelCase -> Some Camel Case.
            </summary>
            <param name="input">Camel case string.</param>
            <returns>Splitted string.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.RemoveSpaces(System.String)">
            <summary>
            Removes all space symbols from string.
            </summary>
            <param name="input">Input string.</param>
            <returns>String without spaces.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.GetRawUserId(System.String)">
            <summary>
            Gets the player's user id without the authentication.
            </summary>
            <param name="userId">The user id.</param>
            <returns>Returns the raw user id.</returns>
        </member>
        <member name="T:Exiled.API.Features.Badge">
            <summary>
            Represents the in-game badge.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Badge.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Badge"/> struct.
            </summary>
            <param name="text">The badge text.</param>
            <param name="color">The badge color.</param>
            <param name="type">The badge type.</param>
            <param name="isGlobal">Indicates whether the badge is global or not.</param>
        </member>
        <member name="P:Exiled.API.Features.Badge.Text">
            <summary>
            Gets the badge text.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.Color">
            <summary>
            Gets the badge color.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.Type">
            <summary>
            Gets the badge type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.IsGlobal">
            <summary>
            Gets a value indicating whether the badge is global or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Broadcast">
            <summary>
            Useful class to save broadcast configs in a cleaner way.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Broadcast.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Broadcast"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Broadcast.#ctor(System.String,System.UInt16,System.Boolean,Broadcast.BroadcastFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Broadcast"/> class.
            </summary>
            <param name="content"><inheritdoc cref="P:Exiled.API.Features.Broadcast.Content"/></param>
            <param name="duration"><inheritdoc cref="P:Exiled.API.Features.Broadcast.Duration"/></param>
            <param name="show"><inheritdoc cref="P:Exiled.API.Features.Broadcast.Show"/></param>
            <param name="type"><inheritdoc cref="P:Exiled.API.Features.Broadcast.Type"/></param>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Content">
            <summary>
            Gets or sets the broadcast content.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Duration">
            <summary>
            Gets or sets the broadcast duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Type">
            <summary>
            Gets or sets the broadcast type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Show">
            <summary>
            Gets or sets a value indicating whether the broadcast should be shown or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Cassie">
            <summary>
            A set of tools to use in-game C.A.S.S.I.E more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Cassie.IsSpeaking">
            <summary>
            Gets a value indicating whether or not C.A.S.S.I.E is currently announcing. Does not include decontamination messages.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean)">
            <summary>
            Reproduce a non-glitched C.A.S.S.I.E message.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="isHeld">Indicates whether C.A.S.S.I.E has to hold the message.</param>
            <param name="isNoisy">Indicates whether C.A.S.S.I.E has to make noises or not during the message.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.GlitchyMessage(System.String,System.Single,System.Single)">
            <summary>
            Reproduce a glitchy C.A.S.S.I.E announcement.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="glitchChance">The chance of placing a glitch between each word.</param>
            <param name="jamChance">The chance of jamming each word.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.DelayedMessage(System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Reproduce a non-glitched C.A.S.S.I.E message after a certain amount of seconds.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="delay">The seconds that have to pass before reproducing the message.</param>
            <param name="isHeld">Indicates whether C.A.S.S.I.E has to hold the message.</param>
            <param name="isNoisy">Indicates whether C.A.S.S.I.E has to make noises or not during the message.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.DelayedGlitchyMessage(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Reproduce a glitchy C.A.S.S.I.E announcement after a certain period of seconds.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="delay">The seconds that have to pass before reproducing the message.</param>
            <param name="glitchChance">The chance of placing a glitch between each word.</param>
            <param name="jamChance">The chance of jamming each word.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.CalculateDuration(System.String,System.Boolean)">
            <summary>
            Calculates duration of a C.A.S.S.I.E message.
            </summary>
            <param name="message">The message, which duration will be calculated.</param>
            <param name="rawNumber">Determines if a number won't be converted to its full pronunciation.</param>
            <returns>Duration (in seconds) of specified message.</returns>
        </member>
        <member name="T:Exiled.API.Features.Log">
            <summary>
            A set of tools to print messages on the server console.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Log.Info(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Info"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Debug(System.Object,System.Boolean)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Debug"/> level messages to the game console.
            Server must have exiled_debug config enabled.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="canBeSent">Indicates whether the log can be sent or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Warn(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Warn"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Error(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Error"/> level messages to the game console.
            This should be used to send errors only.
            It's recommended to send any messages in the catch block of a try/catch as errors with the exception string.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Send(System.Object,Discord.LogLevel,System.ConsoleColor)">
            <summary>
            Sends a log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="level">The message level of importance.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.SendRaw(System.Object,System.ConsoleColor)">
            <summary>
            Sends a raw log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The <see cref="T:System.ConsoleColor"/> of the message.</param>
        </member>
        <member name="T:Exiled.API.Features.Map">
            <summary>
            A set of tools to easily handle the in-game map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.RoomsValue">
            <summary>
            A list of <see cref="T:Exiled.API.Features.Room"/>s on the map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.DoorsValue">
            <summary>
            A list of <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>s on the map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.CamerasValue">
            <summary>
            A list of <see cref="T:Camera079"/>s on the map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.LiftsValue">
            <summary>
            A list of <see cref="T:Lift"/>s on the map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.TeslasValue">
            <summary>
            A list of <see cref="T:TeslaGate"/>s on the map.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.IsLCZDecontaminated">
            <summary>
            Gets a value indicating whether decontamination has begun in the light containment zone.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.ActivatedGenerators">
            <summary>
            Gets the number of activated generators.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Rooms">
            <summary>
            Gets all <see cref="T:Exiled.API.Features.Room"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Doors">
            <summary>
            Gets all <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Cameras">
            <summary>
            Gets all <see cref="T:Camera079"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Lifts">
            <summary>
            Gets all <see cref="T:Lift"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.TeslaGates">
            <summary>
            Gets all <see cref="T:TeslaGate"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.DefaultRagdollOwner">
            <summary>
            Gets the Default <see cref="T:Ragdoll.Info"/>,
            used in <see cref="M:Exiled.API.Features.Map.SpawnRagdoll(RoleType,System.String,PlayerStats.HitInfo,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean,System.Int32,System.String)"/>
            and <see cref="M:Exiled.API.Features.Map.SpawnRagdoll(Role,Ragdoll.Info,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean)"/>.
            </summary>
            <remarks>
            This value can be modified to change the default Ragdoll's info.
            </remarks>
        </member>
        <member name="P:Exiled.API.Features.Map.IntercomState">
            <summary>
            Gets the current state of the intercom.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.IntercomInUse">
            <summary>
            Gets a value indicating whether or not the intercom is currently being used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.IntercomSpeaker">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> that is using the intercom. Will be null if <see cref="P:Exiled.API.Features.Map.IntercomInUse"/> is false.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.FindParentRoom(UnityEngine.GameObject)">
            <summary>
            Tries to find the room that a <see cref="T:UnityEngine.GameObject"/> is inside, first using the <see cref="T:UnityEngine.Transform"/>'s parents, then using a Raycast if no room was found.
            </summary>
            <param name="objectInRoom">The <see cref="T:UnityEngine.GameObject"/> inside the room.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> that the <see cref="T:UnityEngine.GameObject"/> is located inside.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.SpawnRagdoll(Exiled.API.Features.Player,DamageTypes.DamageType,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Spawns a ragdoll for a player on a certain position.
            </summary>
            <param name="victim">Victim, represented as a player.</param>
            <param name="deathCause">The message to be displayed as his death.</param>
            <param name="position">Where the ragdoll will be spawned.</param>
            <param name="rotation">The rotation for the ragdoll.</param>
            <param name="velocity">The initial velocity the ragdoll will have, as if it was exploded.</param>
            <param name="allowRecall">Sets this ragdoll as respawnable by SCP-049.</param>
            <returns>The Ragdoll component (requires Assembly-CSharp to be referenced).</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.SpawnRagdoll(RoleType,DamageTypes.DamageType,System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean,System.Int32,System.String)">
            <summary>
            Spawns a ragdoll on the map based on the different arguments.
            </summary>
            <remarks>
            Tip: You can do '<paramref name="allowRecall"/>: true, <paramref name="playerId"/>: MyPlayer.Id' to skip parameters.
            </remarks>
            <example>
            <code>
            // Code to spawn a fake ragdoll
            if (ev.Player == MyPlugin.TheInmortalPlayer)
            {
                var fakeRagdoll = Map.SpawnRagdoll(RoleType.ClassD, DamageTypes.Fall, "The Falling Guy", new Vector3(1234f, -1f, 4321f));
            }
            </code>
            </example>
            <param name="roleType">The <see cref="T:RoleType"/> to use as ragdoll.</param>
            <param name="deathCause">The death cause, expressed as a <see cref="T:DamageTypes.DamageType"/>.</param>
            <param name="victimNick">The name from the victim, who the corpse belongs to.</param>
            <param name="position">Where the ragdoll will be spawned.</param>
            <param name="rotation">The rotation for the ragdoll.</param>
            <param name="velocity">The initial velocity the ragdoll will have, as if it was exploded.</param>
            <param name="allowRecall">Sets this ragdoll as respawnable by SCP-049. Must have a valid <paramref name="playerId"/>.</param>
            <param name="playerId">Used for recall. The <see cref="P:Exiled.API.Features.Player.Id"/> to be recalled.</param>
            <param name="mirrorOwnerId">Can be ignored. The <see cref="T:Dissonance.Integrations.MirrorIgnorance.MirrorIgnorancePlayer"/>'s PlayerId field.</param>
            <returns>The Ragdoll component (requires Assembly-CSharp to be referenced).</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.SpawnRagdoll(RoleType,System.String,PlayerStats.HitInfo,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean,System.Int32,System.String)">
            <summary>
            Spawns a ragdoll on the map based on the different arguments.
            </summary>
            <remarks>
            Tip: You can do, for example, '<paramref name="velocity"/>: "Vector3.up * 3"' to skip parameters.
            </remarks>
            <example>
            <code>
            // Code to spawn a fake ragdoll
            if (ev.Player == MyPlugin.TheInmortalPlayer)
            {
                var fakeRagdoll = Map.SpawnRagdoll(ev.Player.Role, ev.Player.Position, victimNick: ev.Player.DisplayNickname, playerId: ev.Player.Id);
            }
            </code>
            </example>
            <param name="roleType">The <see cref="T:RoleType"/> to use as ragdoll.</param>
            <param name="victimNick">The name from the victim, who the corpse belongs to.</param>
            <param name="hitInfo">The <see cref="T:PlayerStats.HitInfo"/> that displays who killed this ragdoll, and using which tool.</param>
            <param name="position">Where the ragdoll will be spawned.</param>
            <param name="rotation">The rotation for the ragdoll.</param>
            <param name="velocity">The initial velocity the ragdoll will have, as if it was exploded.</param>
            <param name="allowRecall">Sets this ragdoll as respawnable by SCP-049.</param>
            <param name="playerId">Used for recall. The <see cref="P:Exiled.API.Features.Player.Id"/> to be recalled.</param>
            <param name="mirrorOwnerId">Can be ignored. The <see cref="T:Dissonance.Integrations.MirrorIgnorance.MirrorIgnorancePlayer"/>'s PlayerId field, likely used in the client.</param>
            <returns>The Ragdoll component (requires Assembly-CSharp to be referenced).</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.SpawnRagdoll(Role,Ragdoll.Info,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Optimized method to Spawn a ragdoll on the map.
            Will only allocate the newly created GameObject, requires extra work and pre-loaded base game roles.
            </summary>
            <remarks>
            <list type="number">
            <item>
            <para>
            EXILED already has an internal, default Ragdoll.Info: the use of this
            method to try to optimize a plugin is absolutely optional.
            </para>
            We recommend using: Map.SpawnRagdoll(RoleType roleType, string victimNick, Vector3 position)
            </item>
            <item>
            This method should only ever be used if you're dealing with massive
            server-sided lag.
            </item>
            <item>
            Ragdoll.Info's "ownerID" isn't the SteamID, but the
            <see cref="T:Dissonance.Integrations.MirrorIgnorance.MirrorIgnorancePlayer"/>'s PlayerId field.
            </item>
            </list>
            </remarks>
            <param name="role">Main game's <see cref="T:Role"/> thad defines the role to spawn a ragdoll.</param>
            <param name="ragdollInfo"><see cref="T:Ragdoll.Info"/> object containing the ragdoll's info.</param>
            <param name="position">Where the ragdoll will be spawned.</param>
            <param name="rotation">The rotation for the ragdoll.</param>
            <param name="velocity">The initial velocity the ragdoll will have, as if it was exploded.</param>
            <param name="allowRecall">Sets this ragdoll as respawnable by SCP-049.</param>
            <returns>The <see cref="T:Ragdoll"/> component created.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.SpawnHands(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Spawns hands at the specified position with specified rotation.
            </summary>
            <param name="position">Hands position.</param>
            <param name="rotation">Hands rotation.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.Broadcast(Exiled.API.Features.Broadcast)">
            <summary>
            Broadcasts a message to all players.
            </summary>
            <param name="broadcast">The <see cref="T:Exiled.API.Features.Broadcast"/> to be broadcasted.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags)">
            <summary>
            Broadcasts a message to all players.
            </summary>
            <param name="duration">The duration in seconds.</param>
            <param name="message">The message that will be broadcast (supports Unity Rich Text formatting).</param>
            <param name="type">The broadcast type.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ShowHint(System.String,System.Single)">
            <summary>
            Shows a hint to all players.
            </summary>
            <param name="message">The message that will be broadcasted (supports Unity Rich Text formatting).</param>
            <param name="duration">The duration in seconds.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ClearBroadcasts">
            <summary>
            Clears all players' broadcasts.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.GetRandomSpawnPoint(RoleType)">
            <summary>
            Gets a random spawn point of a <see cref="T:RoleType"/>.
            </summary>
            <param name="roleType">The <see cref="T:RoleType"/> to get the spawn point from.</param>
            <returns>Returns the spawn point <see cref="T:UnityEngine.Vector3"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.StartDecontamination">
            <summary>
            Starts the light containment zone decontamination process.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,System.Boolean)">
            <summary>
            Turns off all lights of the facility.
            </summary>
            <param name="duration">The duration of the blackout.</param>
            <param name="isHeavyContainmentZoneOnly">Indicates whether or not only lights in the heavy containment zone will be turned off.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.GetCameraById(System.UInt16)">
            <summary>
            Gets the camera with the given ID.
            </summary>
            <param name="cameraId">The camera id to be searched for.</param>
            <returns>The <see cref="T:Camera079"/> with the given ID.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.GetCameraByType(UnityEngine.CameraType)">
            <summary>
            Gets the camera with the given camera type.
            </summary>
            <param name="cameraType">The <see cref="T:UnityEngine.CameraType"/> to search for.</param>
            <returns>The <see cref="T:Camera079"/> with the given camera type.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.GetDoorByName(System.String)">
            <summary>
            Gets the door with the given door name.
            </summary>
            <param name="doorName">The door name.</param>
            <returns>The <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> or null if a door with this name doesn't exist.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.ChangeUnitColor(System.Int32,System.String)">
            <summary>
            Changes the color of a MTF unit.
            </summary>
            <param name="index">The index of the unit color you want to change.</param>
            <param name="color">The new color of the Unit.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ClearCache">
            <summary>
            Clears the lazy loading game object cache.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Paths">
            <summary>
            A set of useful paths.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.AppData">
            <summary>
            Gets AppData path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.ManagedAssemblies">
            <summary>
            Gets managed assemblies directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Exiled">
            <summary>
            Gets or sets exiled directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Plugins">
            <summary>
            Gets or sets plugins path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Dependencies">
            <summary>
            Gets or sets Dependencies directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Configs">
            <summary>
            Gets or sets configs path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Config">
            <summary>
            Gets or sets configs path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Log">
            <summary>
            Gets or sets logs path.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Paths.Reload(System.String)">
            <summary>
            Reloads all paths.
            </summary>
            <param name="rootDirectoryName">The new root directory name.</param>
        </member>
        <member name="T:Exiled.API.Features.Player">
            <summary>
            Represents the in-game player, by encapsulating a <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
            <param name="referenceHub">The <see cref="P:Exiled.API.Features.Player.ReferenceHub"/> of the player to be encapsulated.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.#ctor(UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
            <param name="gameObject">The <see cref="P:Exiled.API.Features.Player.GameObject"/> of the player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Dictionary">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all <see cref="T:Exiled.API.Features.Player"/> on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.List">
            <summary>
            Gets a list of all <see cref="T:Exiled.API.Features.Player"/>'s on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UserIdsCache">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing cached <see cref="T:Exiled.API.Features.Player"/> and their user ids.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IdsCache">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing cached <see cref="T:Exiled.API.Features.Player"/> and their ids.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ReferenceHub">
            <summary>
            Gets the encapsulated <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GameObject">
            <summary>
            Gets the encapsulated <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Ammo">
            <summary>
            Gets the player's ammo.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HintDisplay">
            <summary>
            Gets the HintDisplay of the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Inventory">
            <summary>
            Gets the player's inventory.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.PlayerCamera">
            <summary>
            Gets the encapsulated <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>'s PlayerCamera.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CameraTransform">
            <summary>
            Gets the encapsulated <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>'s PlayerCamera.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GrenadeManager">
            <summary>
            Gets the player's grenade manager.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Id">
            <summary>
            Gets or sets the player's id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UserId">
            <summary>
            Gets the player's user id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CustomUserId">
            <summary>
            Gets or sets the player's custom user id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RawUserId">
            <summary>
            Gets the player's user id without the authentication.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AuthenticationToken">
            <summary>
            Gets the player's authentication token.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AuthenticationType">
            <inheritdoc cref="T:Exiled.API.Enums.AuthenticationType"/>
        </member>
        <member name="P:Exiled.API.Features.Player.IsVerified">
            <summary>
            Gets a value indicating whether or not the player is verified.
            </summary>
            <remarks>
            This is always false if online_mode is set to false.
            </remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.DisplayNickname">
            <summary>
            Gets or sets the player's display nickname.
            May be null.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Nickname">
            <summary>
            Gets the player's nickname.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.InfoArea">
            <summary>
            Gets or sets the player's player info area bitmask.
            You can hide player info elements with this.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.PlayerInfoArea">
            <summary>
            Gets or sets the player's player info area bitmask.
            You can hide player info elements with this.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CustomInfo">
            <summary>
            Gets or sets the player's custom player info string.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CustomPlayerInfo">
            <summary>
            Gets or sets the player's custom player info string.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.SessionVariables">
            <summary>
            Gets the dictionary of player's session variables. It is not being saved on player disconnect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsInvisible">
            <summary>
            Gets or sets a value indicating whether or not the player is invisible.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.DoNotTrack">
            <summary>
            Gets a value indicating whether or not the player can be tracked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsConnected">
            <summary>
            Gets a value indicating whether or not the player is connected to the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.TargetGhosts">
            <summary>
            Gets a list of player ids who can't see the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.TargetGhostsHashSet">
            <summary>
            Gets a list of player ids who can't see the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RemoteAdminAccess">
            <summary>
            Gets a value indicating whether or not the player has Remote Admin access.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsOverwatchEnabled">
            <summary>
            Gets or sets a value indicating whether or not the player's overwatch is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CufferId">
            <summary>
            Gets or sets a value indicating the cuffer <see cref="T:Exiled.API.Features.Player"/> id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Position">
            <summary>
            Gets or sets the player's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Rotations">
            <summary>
            Gets or sets the player's rotations.
            </summary>
            <returns>Returns a <see cref="T:UnityEngine.Vector2"/> representing the rotation of the player.</returns>
        </member>
        <member name="P:Exiled.API.Features.Player.Rotation">
            <summary>
            Gets or sets the player's rotation.
            </summary>
            <returns>Returns the direction he's looking at, useful for Raycasts.</returns>
        </member>
        <member name="P:Exiled.API.Features.Player.Team">
            <summary>
            Gets the player's <see cref="P:Exiled.API.Features.Player.Team"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Role">
            <summary>
            Gets or sets the player's <see cref="T:RoleType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RoleColor">
            <summary>
            Gets the <see cref="T:UnityEngine.Color"/> of the player's <see cref="T:RoleType">role</see>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsCuffed">
            <summary>
            Gets a value indicating whether or not the palyer is cuffed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsReloading">
            <summary>
            Gets a value indicating whether or not the player is reloading a weapon.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsZooming">
            <summary>
            Gets a value indicating whether or not the player is zooming with a weapon.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MoveState">
            <summary>
            Gets the player's current <see cref="T:PlayerMovementState"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsJumping">
            <summary>
            Gets a value indicating whether or not the player is jumping.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IPAddress">
            <summary>
            Gets the player's IP address.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.NoClipEnabled">
            <summary>
            Gets or sets a value indicating whether or not the <see cref="T:Exiled.API.Features.Player"/> has No-clip enabled.
            </summary>
            <returns><see cref="T:System.Boolean"/> indicating status.</returns>
        </member>
        <member name="P:Exiled.API.Features.Player.CommandSender">
            <summary>
            Gets the player's command sender instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Sender">
            <summary>
            Gets the player's command sender instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Connection">
            <summary>
            Gets player's <see cref="T:Mirror.NetworkConnection"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsHost">
            <summary>
            Gets a value indicating whether or not the player is the host.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsAlive">
            <summary>
            Gets a value indicating whether or not the player is alive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsDead">
            <summary>
            Gets a value indicating whether or not the player is dead.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsNTF">
            <summary>
            Gets a value indicating whether or not the player's <see cref="T:RoleType"/> is any NTF rank.
            Equivalent to checking the player's <see cref="P:Exiled.API.Features.Player.Team"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsScp">
            <summary>
            Gets a value indicating whether or not the player's <see cref="T:RoleType"/> is any SCP rank.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsHuman">
            <summary>
            Gets a value indicating whether or not the player's <see cref="T:RoleType"/> is any human rank (except the tutorial role).
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Camera">
            <summary>
            Gets or sets the camera SCP-079 is currently controlling.
            Only applies if the player is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Side">
            <summary>
            Gets the player's <see cref="T:Exiled.API.Enums.Side"/> they're currently in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsFriendlyFireEnabled">
            <summary>
            Gets or sets a value indicating whether the player friendly fire is enabled or not.
            This only isAllowed to deal friendly fire damage, not take friendly fire damage.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Scale">
            <summary>
            Gets or sets the player's scale.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsBypassModeEnabled">
            <summary>
            Gets or sets a value indicating whether the player's bypass mode is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsMuted">
            <summary>
            Gets or sets a value indicating whether or not the player is muted.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsIntercomMuted">
            <summary>
            Gets or sets a value indicating whether or not the player is intercom muted.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsGodModeEnabled">
            <summary>
            Gets or sets a value indicating whether or not the player has godmode enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Health">
            <summary>
            Gets or sets the player's health.
            If the health is greater than the <see cref="P:Exiled.API.Features.Player.MaxHealth"/>, the MaxHealth will also be changed to match the health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxHealth">
            <summary>
            Gets or sets the player's maximum health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ArtificialHealth">
            <summary>
            Gets or sets the player's artificial health.
            If the health is greater than the <see cref="P:Exiled.API.Features.Player.MaxArtificialHealth"/>, it will also be changed to match the artificial health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AdrenalineHealth">
            <summary>
            Gets or sets the player's adrenaline health.
            If the health is greater than the <see cref="P:Exiled.API.Features.Player.MaxAdrenalineHealth"/>, the MaxAdrenalineHealth will also be changed to match the adrenaline health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxArtificialHealth">
            <summary>
            Gets or sets the player's maximum artificial health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxAdrenalineHealth">
            <summary>
            Gets or sets the player's maximum adrenaline health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentScp">
            <summary>
            Gets or sets the player's current SCP.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentItem">
            <summary>
            Gets or sets the item in the player's hand, returns the default value if empty.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentItemIndex">
            <summary>
            Gets the index of the current item in hand.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Abilities">
            <summary>
            Gets or sets the abilities of SCP-079. Can be null.
            Only applies if the player is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Levels">
            <summary>
            Gets or sets the levels of SCP-079. Can be null.
            Only applies if the player is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Speaker">
            <summary>
            Gets or sets the speaker this player is currently using. Can be null.
            Only applies if the player is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.LockedDoors">
            <summary>
            Gets or sets the doors this player has locked. Can be null.
            Only applies if the player is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Experience">
            <summary>
            Gets or sets the amount of experience this player has.
            Only applies if the player is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Stamina">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Player.Stamina"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Level">
            <summary>
            Gets or sets this player's level.
            Only applies if the player is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxEnergy">
            <summary>
            Gets or sets this player's max energy.
            Only applies if the player is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Energy">
            <summary>
            Gets or sets this player's energy.
            Only applies if the player is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsStaffBypassEnabled">
            <summary>
            Gets a value indicating whether the staff bypass is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GroupName">
            <summary>
            Gets or sets the player's group name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentRoom">
            <summary>
            Gets the current room the player is in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Group">
            <summary>
            Gets or sets the player's group.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RankColor">
            <summary>
            Gets or sets the player's rank color.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RankName">
            <summary>
            Gets or sets the player's rank name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GlobalBadge">
            <summary>
            Gets the global badge of the player, can be null if none.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.BadgeHidden">
            <summary>
            Gets or sets a value indicating whether or not the player's badge is hidden.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsInPocketDimension">
            <summary>
            Gets a value indicating whether or not the player is in the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsUsingStamina">
            <summary>
            Gets or sets a value indicating whether player should use stamina system.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Scp330Usages">
            <summary>
            Gets or sets a player's SCP-330 usages counter.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HasHands">
            <summary>
            Gets a value indicating whether player has hands.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Items">
            <summary>
            Gets player's items.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UnverifiedPlayers">
            <summary>
            Gets a dictionary for storing player objects of connected but not yet verified players.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Exiled.API.Enums.Side)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by side.
            </summary>
            <param name="side">The players' side.</param>
            <returns>Returns the filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Team)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by team.
            </summary>
            <param name="team">The players' team.</param>
            <returns>Returns the filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(RoleType)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by role.
            </summary>
            <param name="role">The players' role.</param>
            <returns>Returns the filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(CommandSender)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the CommandSender, if any.
            </summary>
            <param name="sender">The command sender.</param>
            <returns>Returns a player or null if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(ReferenceHub)">
            <summary>
            Gets the Player belonging to the ReferenceHub, if any.
            </summary>
            <param name="referenceHub">The player's <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>.</param>
            <returns>Returns a player or null if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(UnityEngine.GameObject)">
            <summary>
            Gets the Player belonging to the GameObject, if any.
            </summary>
            <param name="gameObject">The player's <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>Returns a player or null if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.Int32)">
            <summary>
            Gets the player belonging to the player with the specified id.
            </summary>
            <param name="id">The player id.</param>
            <returns>Returns the player found or null if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.String)">
            <summary>
            Gets the player by his identifier.
            </summary>
            <param name="args">The player's nickname, steamID64 or Discord ID.</param>
            <returns>Returns the player found or null if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetCameraById(System.UInt16)">
            <inheritdoc cref="M:Exiled.API.Features.Map.GetCameraById(System.UInt16)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.SetCamera(System.UInt16)">
            <summary>
            Sets the camera the player is currently located at.
            Only applies if the player is SCP-079.
            </summary>
            <param name="cameraId">Camera ID.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SetCamera(Camera079)">
            <summary>
            Sets the camera the player is currently located at.
            Only applies if the player is SCP-079.
            </summary>
            <param name="camera">The <see cref="T:Camera079"/> object to switch to.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SetRank(System.String,UserGroup)">
            <summary>
            Sets the player's rank.
            </summary>
            <param name="name">The rank name to be set.</param>
            <param name="group">The group to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Handcuff(Exiled.API.Features.Player)">
            <summary>
            Handcuff the player.
            </summary>
            <param name="cuffer">The cuffer player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SetRole(RoleType,System.Boolean,System.Boolean)">
            <summary>
            Sets the player's <see cref="T:RoleType"/>.
            </summary>
            <param name="newRole">The new <see cref="T:RoleType"/> to be set.</param>
            <param name="lite">Indicates whether it should preserve the position and inventory after changing the role or not.</param>
            <param name="isEscaped">Indicates whether the player is escaped or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Broadcast(Exiled.API.Features.Broadcast)">
            <summary>
            Broadcasts the given <see cref="T:Exiled.API.Features.Broadcast"/> to the player.
            </summary>
            <param name="broadcast">The <see cref="T:Exiled.API.Features.Broadcast"/> to be broadcasted.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.DropItem(Inventory.SyncItemInfo)">
            <summary>
            Drops an item from the player's inventory.
            </summary>
            <param name="item">The item to be dropped.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.HasItem(ItemType)">
            <summary>
            Indicates whether or not the player has an item.
            </summary>
            <param name="targetItem">The item to search for.</param>
            <returns>true, if the player has it; otherwise, false.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveItem(Inventory.SyncItemInfo)">
            <summary>
            Removes an item from the player's inventory.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveItem">
            <summary>
            Removes the held item from the player's inventory.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.SendConsoleMessage(System.String,System.String)">
            <summary>
            Sends a console message to the player's console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SendConsoleMessage(Exiled.API.Features.Player,System.String,System.String)">
            <summary>
            Sends a console message to a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="target">The message target.</param>
            <param name="message">The message to be sent.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Disconnect(System.String)">
            <summary>
            Disconnects a <see cref="P:Exiled.API.Features.Player.ReferenceHub">player</see>.
            </summary>
            <param name="reason">The disconnection reason.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(System.Single,DamageTypes.DamageType,System.String,System.Int32)">
            <summary>
            Hurts the player.
            </summary>
            <param name="damage">The damage to be inflicted.</param>
            <param name="damageType">The damage type.</param>
            <param name="attackerName">The attacker name.</param>
            <param name="attackerId">The attacker player id.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(System.Single,Exiled.API.Features.Player,DamageTypes.DamageType)">
            <summary>
            Hurts the player.
            </summary>
            <param name="damage">The damage to be inflicted.</param>
            <param name="attacker">The attacker.</param>
            <param name="damageType">The damage type.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Kill(DamageTypes.DamageType)">
            <summary>
            Kills the player.
            </summary>
            <param name="damageType">The <see cref="T:DamageTypes.DamageType"/> that will kill the player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Ban(System.Int32,System.String,System.String)">
            <summary>
            Bans the player.
            </summary>
            <param name="duration">The ban duration.</param>
            <param name="reason">The ban reason.</param>
            <param name="issuer">The ban issuer nickname.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Kick(System.String,System.String)">
            <summary>
            Kicks the player.
            </summary>
            <param name="reason">The kick reason.</param>
            <param name="issuer">The kick issuer nickname.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.BlinkTag">
            <summary>
            Blink the player's tag.
            </summary>
            <returns>Used to wait.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoteAdminMessage(System.String,System.Boolean,System.String)">
            <summary>
            Sends a message to the player's Remote Admin console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="success">Indicates whether the message should be highlighted as success or not.</param>
            <param name="pluginName">The plugin name.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags)">
            <summary>
            A simple broadcast to a <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>. Doesn't get logged to the console and can be monospaced.
            </summary>
            <param name="duration">The broadcast duration.</param>
            <param name="message">The message to be broadcasted.</param>
            <param name="type">The broadcast type.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ClearBroadcasts">
            <summary>
            Clears the player's brodcast. Doesn't get logged to the console.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(ItemType)">
            <summary>
            Add an item of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="itemType">The item to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Inventory.SyncItemInfo)">
            <summary>
            Add an item to the player's inventory.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.List{ItemType})">
            <summary>
            Resets the player's inventory to the provided list of items, clearing any items it already possess.
            </summary>
            <param name="newItems">The new items that have to be added to the inventory.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.List{Inventory.SyncItemInfo})">
            <summary>
            Resets the player's inventory to the provided list of items, clearing any items it already possess.
            </summary>
            <param name="newItems">The new items that have to be added to the inventory.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ClearInventory">
            <summary>
            Clears the player's inventory, including all ammo and items.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.DropItems">
            <summary>
            Drops all items in the player's inventory, including all ammo and items.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.SetAmmo(Exiled.API.Enums.AmmoType,System.UInt32)">
            <summary>
            Sets the amount of a specified <see cref="T:Exiled.API.Enums.AmmoType">ammo type</see>.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> to be set.</param>
            <param name="amount">The amount of ammo to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.GetAmmo(Exiled.API.Enums.AmmoType)">
            <summary>
            Gets the amount of a specified <see cref="T:Exiled.API.Enums.AmmoType"/>.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> to get the amount from.</param>
            <returns>Returns the amount of the chosen <see cref="T:Exiled.API.Enums.AmmoType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ShowHint(System.String,System.Single)">
            <summary>
            Simple way to show a hint to the player.
            </summary>
            <param name="message">The message to be shown.</param>
            <param name="duration">The duration the text will be on screen.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.GetEffectActive``1">
            <summary>
            Gets a <see cref="T:System.Boolean"/> describing whether or not the given <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see> is currently enabled.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> to check.</typeparam>
            <returns>A <see cref="T:System.Boolean"/> determining whether or not the player effect is active.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableAllEffects">
            <summary>
             Disables all currently active <see cref="T:CustomPlayerEffects.PlayerEffect">status effects</see>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableEffect``1">
            <summary>
            Disables a specific <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see> on the player.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> to disable.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableEffect(Exiled.API.Enums.EffectType)">
            <summary>
            Disables a specific <see cref="T:Exiled.API.Enums.EffectType">status effect</see> on the player.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/> to disable.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect``1(System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see> on the player.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> to enable.</typeparam>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to true will add this duration onto the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(CustomPlayerEffects.PlayerEffect,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see> on the player.
            </summary>
            <param name="effect">The name of the <see cref="T:CustomPlayerEffects.PlayerEffect"/> to enable.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to true will add this duration onto the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(System.String,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see> on the player.
            </summary>
            <param name="effect">The name of the <see cref="T:CustomPlayerEffects.PlayerEffect"/> to enable.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to true will add this duration onto the effect.</param>
            <returns>A bool indicating whether or not the effect was valid and successfully enabled.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(Exiled.API.Enums.EffectType,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:Exiled.API.Enums.EffectType">status effect</see> on the player.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/> to enable.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to true will add this duration onto the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.GetEffect(Exiled.API.Enums.EffectType)">
            <summary>
            Gets an instance of <see cref="T:CustomPlayerEffects.PlayerEffect"/> by <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <returns>The <see cref="T:CustomPlayerEffects.PlayerEffect"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetEffect(Exiled.API.Enums.EffectType,CustomPlayerEffects.PlayerEffect@)">
            <summary>
            Tries to get an instance of <see cref="T:CustomPlayerEffects.PlayerEffect"/> by <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <param name="playerEffect">The <see cref="T:CustomPlayerEffects.PlayerEffect"/>.</param>
            <returns>A bool indicating whether or not the <paramref name="playerEffect"/> was successfully gotten.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetEffectIntensity``1">
            <summary>
            Gets a <see cref="T:System.Byte"/> indicating the intensity of the given <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see>.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> to check.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the given type is not a valid <see cref="T:CustomPlayerEffects.PlayerEffect"/>.</exception>
            <returns>The intensity of the effect.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ChangeEffectIntensity``1(System.Byte)">
            <summary>
            Changes the intensity of a <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see>.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> to change the intensity of.</typeparam>
            <param name="intensity">The intensity of the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ChangeEffectIntensity(System.String,System.Byte,System.Single)">
            <summary>
            Changes the intensity of a <see cref="T:CustomPlayerEffects.PlayerEffect">status effect</see>.
            </summary>
            <param name="effect">The name of the <see cref="T:CustomPlayerEffects.PlayerEffect"/> to enable.</param>
            <param name="intensity">The intensity of the effect.</param>
            <param name="duration">The new length of the effect. Defaults to infinite length.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveHands">
            <summary>
            Removes the player's hands.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Plugin`1">
            <summary>
            Expose how a plugin has to be made.
            </summary>
            <typeparam name="TConfig">The config type.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Plugin`1"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Author">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Version">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.RequiredExiledVersion">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Commands">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Config">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnDisabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnReloaded">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnRegisteringCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnUnregisteringCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.CompareTo(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Respawn">
            <summary>
            A set of tools to handle team respawns more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.NextKnownTeam">
            <summary>
            Gets the next known <see cref="T:Respawning.SpawnableTeamType"/> that will spawn.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.TimeUntilRespawn">
            <summary>
            Gets the amount of seconds before the next respawn will occur.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.IsSpawning">
            <summary>
            Gets a value indicating whether or not a team is currently being spawned or the animations are playing for a team.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.NtfTickets">
            <summary>
            Gets the amount of spawn tickets belonging to the NTF.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.ChaosTickets">
            <summary>
            Gets the amount of spawn tickets belonging to the Chaos Insurgency.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.Controller">
            <summary>
            Gets the actual <see cref="T:Respawning.RespawnEffectsController"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffect(System.Byte)">
            <summary>
            Play an effect when a certain class spawns.
            </summary>
            <param name="effect">The effect to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffect(Exiled.API.Enums.RespawnEffectType)">
            <summary>
            Play an effect when a certain class spawns.
            </summary>
            <param name="effect">The effect to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffects(System.Byte[])">
            <summary>
            Play effects when a certain class spawns.
            </summary>
            <param name="effects">The effects to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffects(Exiled.API.Enums.RespawnEffectType[])">
            <summary>
            Play effects when a certain class spawns.
            </summary>
            <param name="effects">The effects to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.SummonNtfChopper">
            <summary>
            Summons the NTF chopper.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Respawn.SummonChaosInsurgencyVan(System.Boolean)">
            <summary>
            Summons the <see cref="F:RoleType.ChaosInsurgency"/> van.
            </summary>
            <param name="playMusic">Whether or not to play the Chaos Insurgency spawn music.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.GrantTickets(Respawning.SpawnableTeamType,System.Int32,System.Boolean)">
            <summary>
            Grants tickets to a <see cref="T:Respawning.SpawnableTeamType"/>.
            </summary>
            <param name="team">The <see cref="T:Respawning.SpawnableTeamType"/> to grant tickets to.</param>
            <param name="amount">The amount of tickets to grant.</param>
            <param name="overrideLocks">Whether or not to override ticket locks.</param>
            <returns>Whether or not tickets were granted successfully.</returns>
        </member>
        <member name="M:Exiled.API.Features.Respawn.ForceWave(Respawning.SpawnableTeamType,System.Boolean)">
            <summary>
            Forces a spawn of the given <see cref="T:Respawning.SpawnableTeamType"/>.
            </summary>
            <param name="team">The <see cref="T:Respawning.SpawnableTeamType"/> to spawn.</param>
            <param name="playEffects">Whether or not effects will be played with the spawn.</param>
        </member>
        <member name="T:Exiled.API.Features.Room">
            <summary>
            The in-game room.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Name">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Transform">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Position">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Zone">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.ZoneType"/> in which the room is located.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Type">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.RoomType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Players">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Doors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Door"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.LightsOff">
            <summary>
            Gets a value indicating whether or not the lights in this room are currently flickered off.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Room.TurnOffLights(System.Single)">
            <summary>
            Flickers the room's lights off for a duration.
            </summary>
            <param name="duration">Duration in seconds.</param>
        </member>
        <member name="M:Exiled.API.Features.Room.SetLightIntensity(System.Single)">
            <summary>
            Sets the intensity of the lights in the room.
            </summary>
            <param name="intensity">The light intensity multiplier. Cannot be brighter than 2 or darker than 0.</param>
        </member>
        <member name="M:Exiled.API.Features.Room.CreateComponent(UnityEngine.GameObject)">
            <summary>
            Factory method to create and add a <see cref="T:Exiled.API.Features.Room"/> component to a Transform.
            We can add parameters to be set privately here.
            </summary>
            <param name="roomGameObject">The Game Object to attach the Room component to.</param>
            <returns>The Room component that was instantiated onto the Game Object.</returns>
        </member>
        <member name="T:Exiled.API.Features.Round">
            <summary>
            A set of tools to handle the round more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.ElapsedTime">
            <summary>
            Gets the time elapsed from the start of the round.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.StartedTime">
            <summary>
            Gets the start time of the round.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsStarted">
            <summary>
            Gets a value indicating whether the round is started or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsLocked">
            <summary>
            Gets or sets a value indicating whether the round is locked or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsLobbyLocked">
            <summary>
            Gets or sets a value indicating whether the lobby is locked or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Round.Restart">
            <summary>
            Restarts the round.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Round.Restart(System.Boolean,System.Boolean,ServerStatic.NextRoundAction)">
            <summary>
            Restarts the round with custom settings.
            </summary>
            <param name="fastRestart">
            Indicates whether or not it'll be a fast restart.
            If it's a fast restart, then players won't be reconnected from
            the server; otherwise, they will.
            </param>
            <param name="overrideRestartAction">
            Overrides a value of <see cref="T:ServerStatic.NextRoundAction"/>.
            Makes sense if someone used a command to set another action.
            </param>
            <param name="restartAction">
            The <see cref="T:ServerStatic.NextRoundAction"/>.
            <para>
            <see cref="F:ServerStatic.NextRoundAction.DoNothing"/> - does nothing, just restarts the round silently.
            <see cref="F:ServerStatic.NextRoundAction.Restart"/> - restarts the server, reconnects all players.
            <see cref="F:ServerStatic.NextRoundAction.Shutdown"/> - shutdowns the server, also disconnects all players.
            </para>
            </param>
        </member>
        <member name="M:Exiled.API.Features.Round.RestartSilently">
            <summary>
            Restarts the round silently.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Round.ForceEnd">
            <summary>
            Forces the round to end, regardless of which factions are alive.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> describing whether or not the round was successfully ended.</returns>
        </member>
        <member name="M:Exiled.API.Features.Round.Start">
            <summary>
            Start the round.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Scp096">
            <summary>
            A set of tools to modify SCP-096's behaviour.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp096.MaxShield">
            <summary>
            Gets or Sets a value indicating the max shield amount SCP-096 can have during his docile state.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp096.TurnedPlayers">
            <summary>
            Gets a list of player ids who will be turned away from SCP-096.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Scp173">
            <summary>
            A set of tools to modify SCP-173's behaviour.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp173.TurnedPlayers">
            <summary>
            Gets a list of player ids who will be turned away from SCP-173.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Scp914">
            <summary>
            A set of tools to modify SCP-914's behaviour.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.KnobStatus">
            <summary>
            Gets or sets SCP-914 <see cref="T:Scp914.Scp914Knob"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.Recipes">
            <summary>
            Gets or sets SCP-914 recipes.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.ConfigMode">
            <summary>
            Gets or sets SCP-914 config mode.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.IsWorking">
            <summary>
            Gets a value indicating whether the SCP-914 was activated and is currently processing items.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.IntakeBooth">
            <summary>
            Gets the intake booth <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.OutputBooth">
            <summary>
             Gets the output booth <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp914.Start">
            <summary>
            Starts the SCP-914.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Server">
            <summary>
            A set of tools to easily work with the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Host">
            <summary>
            Gets the player's host of the server.
            Might be null when called when the server isn't loaded.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Broadcast">
            <summary>
            Gets the cached <see cref="P:Exiled.API.Features.Server.Broadcast"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.BanPlayer">
            <summary>
            Gets the cached <see cref="P:Exiled.API.Features.Server.BanPlayer"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.SendSpawnMessage">
            <summary>
            Gets the cached <see cref="P:Exiled.API.Features.Server.SendSpawnMessage"/> <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Name">
            <summary>
            Gets or sets the name of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.IpAddress">
            <summary>
            Gets the Ip address of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Port">
            <summary>
            Gets the port of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.FriendlyFire">
            <summary>
            Gets or sets a value indicating whether friendly fire is enabled or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Server.Restart">
            <summary>
            Restarts the server, reconnects all players.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Server.Shutdown">
            <summary>
            Shutdowns the server, disconnects all players.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Server.RestartRedirect(System.UInt16)">
            <summary>
            Redirects players to a server on another port, restarts the current server.
            </summary>
            <param name="redirectPort">The port to redirect players to.</param>
            <returns>true, if redirection was successful; otherwise, false.</returns>
            <remarks>If the returned value is false, the server won't restart.</remarks>
        </member>
        <member name="M:Exiled.API.Features.Server.ShutdownRedirect(System.UInt16)">
            <summary>
            Redirects players to a server on another port, shutdowns the current server.
            </summary>
            <param name="redirectPort">The port to redirect players to.</param>
            <returns>true, if redirection was successful; otherwise, false.</returns>
            <remarks>If the returned value is false, the server won't shutdown.</remarks>
        </member>
        <member name="T:Exiled.API.Features.Warhead">
            <summary>
            A set of tools to easily work with the alpha warhead.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.Controller">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadController"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.SitePanel">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadNukesitePanel"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.OutsitePanel">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadOutsitePanel"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.LeverStatus">
            <summary>
            Gets or sets a value indicating whether the warhead lever is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsKeycardActivated">
            <summary>
            Gets or sets a value indicating whether the warhead has already been activated or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsDetonated">
            <summary>
            Gets a value indicating whether the warhead has already been detonated or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsInProgress">
            <summary>
            Gets a value indicating whether the warhead detonation is in progress or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.DetonationTimer">
            <summary>
            Gets or sets the warhead detonation timer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.RealDetonationTimer">
            <summary>
            Gets the warhead real detonation timer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsWarheadLocked">
            <summary>
            Gets or sets a value indicating whether the warhead can be disabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsLocked">
            <summary>
            Gets or sets a value indicating whether the warhead can be disabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.CanBeStarted">
            <summary>
            Gets a value indicating whether the warhead can be started or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Start">
            <summary>
            Starts the warhead countdown.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Stop">
            <summary>
            Stops the warhead.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Detonate">
            <summary>
            Detonates the warhead.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Shake">
            <summary>
            Shake all players, like if the warhead has been detonated.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IConfig">
            <summary>
            Defines the contract for basic config features.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IConfig.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the plugin is enabled or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IPlugin`1">
            <summary>
            Defines the contract for basic plugin features.
            </summary>
            <typeparam name="TConfig">The config type.</typeparam>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Assembly">
            <summary>
            Gets the plugin assembly.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Name">
            <summary>
            Gets the plugin name.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Prefix">
            <summary>
            Gets the plugin prefix.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Author">
            <summary>
            Gets the plugin author.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Commands">
            <summary>
            Gets the plugin commands.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Priority">
            <summary>
            Gets the plugin priority.
            Higher values mean higher priority and vice versa.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Version">
            <summary>
            Gets the plugin version.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.RequiredExiledVersion">
            <summary>
            Gets the required version of Exiled to run the plugin without bugs or incompatibilities.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Config">
            <summary>
            Gets the plugin config.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnEnabled">
            <summary>
            Fired after enabling the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnDisabled">
            <summary>
            Fired after disabling the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnReloaded">
            <summary>
            Fired after reloading the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnRegisteringCommands">
            <summary>
            Fired before registering commands.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnUnregisteringCommands">
            <summary>
            Fired before unregistering configs.
            </summary>
        </member>
    </members>
</doc>
